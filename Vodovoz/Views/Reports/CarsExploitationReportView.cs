using System;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Gamma.GtkWidgets.Cells;
using Gamma.Widgets;
using Gamma.Widgets.Additions;
using Gtk;
using QS.Views.GtkUI;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	[ToolboxItem(true)]
	public partial class CarsExploitationReportView : TabViewBase<CarsExploitationReportViewModel>
	{
		private Task _generationTask;

		public CarsExploitationReportView(CarsExploitationReportViewModel viewModel) : base(viewModel)
		{
			this.Build();

			Configure();
		}

		private void Configure()
		{
			UpdateSliderArrow();

			// Период

			comboMonth.ItemsEnum = typeof(Month);
			comboMonth.SelectedItem = (Month)DateTime.Today.Month;
			comboMonth.Binding.AddBinding(ViewModel, vm => vm.StartMonth, w => w.SelectedItem).InitializeFromSource();

			comboYear.DefaultFirst = true;
			comboYear.ItemsList = Enumerable.Range(DateTime.Now.AddYears(-10).Year, 11).Reverse();
			comboYear.Binding.AddBinding(ViewModel, vm => vm.StartYear, w => w.SelectedItem).InitializeFromSource();

			// Подсчет по

			comboIndicatorsType.DefaultFirst = true;
			comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);
			comboIndicatorsType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboIndicatorsType.Binding.AddBinding(ViewModel, vm => vm.IndicatorsType, w => w.SelectedItem).InitializeFromSource();

			// Принадлежность автомобиля

			enumComboOwnType.ItemsEnum = typeof(CarOwnType);
			enumComboOwnType.EnumItemSelected += (sender, args) => OnComboOwnTypeChanged();
			enumComboOwnType.Binding.AddBinding(ViewModel, vm => vm.CarOwnType, w => w.SelectedItem).InitializeFromSource();

			// Тип автомобиля компании

			comboCompanyCarType.DefaultFirst = true;
			comboCompanyCarType.ItemsEnum = typeof(CompanyCarType);
			comboCompanyCarType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboCompanyCarType.Binding.AddBinding(ViewModel, vm => vm.CompanyCarType, w => w.SelectedItem).InitializeFromSource();

			// Вид автомобиля водителя

			comboDriverCarKind.WidthRequest = 150;
			comboDriverCarKind.ItemsList = ViewModel.DriverCarKinds;
			comboDriverCarKind.Binding.AddBinding(ViewModel, vm => vm.DriverCarKind, w => w.SelectedItem).InitializeFromSource();

			// Раскат

			comboIsRaskat.ItemsEnum = typeof(AllYesNo);
			comboIsRaskat.Binding.AddBinding(ViewModel, vm => vm.Raskat, w => w.SelectedItem).InitializeFromSource();

			hboxDriverDelayTime.Visible = ylabelDriverScheduleDelay.Visible = false;

			yspinMinutes.ValueAsInt = 30;

			ybuttonInfo.Clicked += (sender, args) => { ViewModel.ShowInfoWindow(); };
			ybuttonSelectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.SelectAll(); };
			ybuttonUnselectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.UnselectAll(); };

			comboDriverCarKind.WidthRequest = 150;
			comboDriverCarKind.ItemsList = ViewModel.DriverCarKinds;

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarAutocompleteSelectorFactory);
			entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject);
			entryCar.Changed += (sender, args) => OnEntryCarChanged();

			ybuttonSave.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.CanSave, w => w.Sensitive)
				.InitializeFromSource();

			enumchecklistIndicators.RememberStateOnHide = true;
			enumchecklistIndicators.EnumType = typeof(Indicator);
			enumchecklistIndicators.Binding.AddBinding(ViewModel, vm => vm.SelectedIndicators, w => w.SelectedValuesList, new EnumsListConverter<Indicator>());

			ybuttonCreateReport.Binding.AddSource(ViewModel)
				.AddFuncBinding(vm => !vm.IsGenerating, w => w.Visible)
				.AddBinding(vm => vm.CanGenerate, w => w.Sensitive)
				.InitializeFromSource();

			ybuttonCreateReport.Clicked += OnButtonCreateReportClicked;

			ycheckbuttonConditionalFormattingRequired.Binding.AddBinding(ViewModel, vm => vm.IsConditionalFormattingRequired, w => w.Active).InitializeFromSource();

			ybuttonAbortCreateReport.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.IsGenerating, w => w.Visible)
				.AddBinding(vm => vm.CanCancelGenerate, w => w.Sensitive)
				.InitializeFromSource();

			ybuttonAbortCreateReport.Clicked += OnButtonAbortCreateReportClicked;

			ViewModel.PropertyChanged += ViewModelPropertyChanged;

			OnComboOwnTypeChanged();

			enumchecklistIndicators.SelectAll();
		}

		private void ConfigureTreeView()
		{
			var columnsConfig = Gamma.ColumnConfig.FluentColumnsConfig<CarsExploitationReportRow>.Create()
				.AddColumn("№").AddNumericRenderer(row => row.CarOrderNumber).XAlign(0.5f)
				.AddColumn("П").AddTextRenderer(row => row.CarOwnTypeName).XAlign(0.5f)
				.AddColumn("Т").AddTextRenderer(row => row.CarTypeName).XAlign(0.5f)
				.AddColumn("Номер").AddTextRenderer(row => row.RegNumber).XAlign(0.5f)
				.AddColumn("Показатель").AddEnumRenderer(row => row.Indicator).XAlign(0.5f)
				.AddColumn("Закрепленный водитель").AddTextRenderer(row => row.AssignedDriver).XAlign(0.5f)
				.AddColumn("Обслуж. ч. города").AddTextRenderer(row => row.GeographicalGroups).XAlign(0.5f);

			var month = ViewModel.Report.StartDate.Month;
			var year = ViewModel.Report.StartDate.Year;

			var weekend = new[] { DayOfWeek.Saturday, DayOfWeek.Sunday };

			var daysInMonth = DateTime.DaysInMonth(year, month);

			for(var i = 0; i < daysInMonth; i++)
			{
				var index = i;
				bool isHoliday = weekend.Contains(new DateTime(year, month, i + 1).DayOfWeek);
				var dayLabelText = $"{ i + 1 }";

				columnsConfig.AddColumn($"{ dayLabelText }")
					.MinWidth(35)
					.HeaderAlignment(.5f)
					.AddTextRenderer(row => row.Days[index] == null ? "" : row.Days[index].ToString())
					.AddSetter(MakeDaysConditionalFormattingSetter(index, isHoliday))
					.WrapWidth(35)
					.WrapMode(Pango.WrapMode.WordChar)
					.XAlign(0.5f)
					.RowCells();
			}

			ytreeReportIndicatorsRows.ColumnsConfig = columnsConfig.Finish();

			ytreeReportIndicatorsRows.EnableGridLines = TreeViewGridLines.Both;
		}

		private Action<NodeCellRendererText<CarsExploitationReportRow>, CarsExploitationReportRow> MakeDaysConditionalFormattingSetter(int index, bool isHoliday)
		{
			return (x, y) =>
			{
				if(isHoliday)
				{
					x.Weight = 800;
				}

				if(ViewModel.Report != null)
				{
					if(ViewModel.Report.CreationDate >= ViewModel.Report.StartDate.AddDays(index))
					{
						bool isBad = false;
						if(y.Indicator == Indicator.Trips)
						{
							var minTrips = y.CarType == CompanyCarType.Largus ? 2 : 1;

							int intValue;

							if(!int.TryParse(x.Text ?? "0", out intValue) || intValue < minTrips)
							{
								isBad = true;
							}
						}

						if(y.Indicator == Indicator.WageDistricts)
						{
							var isCompanyCar = y.CarOwnType = CarOwnType.Company;
							if((x.Text ?? "") == "П")
							{
								isBad = true;
							}
						}

						if(isBad)
						{
							x.CellBackgroundGdk = new Gdk.Color(255, 199, 206);
						}
						else
						{
							x.CellBackgroundGdk = new Gdk.Color(252, 252, 252);
						}
					}
				}
			};
		}

		private void UpdateSliderArrow()
		{
			arrowSlider.ArrowType = parametersContainer.Visible ? Gtk.ArrowType.Left : Gtk.ArrowType.Right;
		}

		protected void OnEventboxArrowButtonPressEvent(object o, Gtk.ButtonPressEventArgs args)
		{
			parametersContainer.Visible = !parametersContainer.Visible;
			UpdateSliderArrow();
		}

		private void UpdateAvailableIndicators()
		{
			enumchecklistIndicators.ClearEnumHideList();

			enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.WorkSchedules });

			if((IndicatorsType)comboIndicatorsType.SelectedItem == IndicatorsType.Plan)
			{
				enumchecklistIndicators.AddEnumToHideList(
					new Enum[] {
						Indicator.MileageRecalculated,
						Indicator.MileageConfirmed,
						Indicator.FuelOverspending,
						Indicator.Undeliveries,
						Indicator.LateArrivals,
						Indicator.WorkSchedules
					});
			}
			else
			{
				enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.MileagePlan });
			}

			switch(enumComboOwnType.SelectedItem as CarOwnType?)
			{
				case CarOwnType.Company:
					if(comboCompanyCarType.SelectedItem is CompanyCarType.Largus)
					{
						enumchecklistIndicators.AddEnumToHideList(new Enum[] { Indicator.Forwarders });
					}
					break;
				case CarOwnType.Driver:
					enumchecklistIndicators.AddEnumToHideList(
						new Enum[] { Indicator.MileageConfirmed, Indicator.MileagePlan, Indicator.MileageRecalculated, Indicator.FuelOverspending });
					break;
			}
		}

		private void ViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			if(e.PropertyName == nameof(ViewModel.Report))
			{
				if(ViewModel.Report?.Rows != null)
				{
					ConfigureTreeView();
					ytreeReportIndicatorsRows.ItemsDataSource = ViewModel.Report.Rows;
					ytreeReportIndicatorsRows.YTreeModel.EmitModelChanged();
				}
			}
		}

		private void OnComboOwnTypeChanged()
		{
			var carOwnType = enumComboOwnType.SelectedItem as CarOwnType?;
			switch(carOwnType)
			{
				case CarOwnType.Company:
					ylabelCompanyCarType.Visible = true;
					comboCompanyCarType.Visible = true;

					comboIsRaskat.Sensitive = false;
					comboIsRaskat.SelectedItem = AllYesNo.No;
					ylabelDriverCarType.Visible = false;
					comboDriverCarKind.Visible = false;
					comboDriverCarKind.SelectedItem = SpecialComboState.All;
					break;
				case CarOwnType.Driver:
					if(entryCar.Subject == null)
					{
						comboIsRaskat.Sensitive = true;
					}

					ylabelDriverCarType.Visible = true;
					comboDriverCarKind.Visible = true;

					ylabelCompanyCarType.Visible = false;
					comboCompanyCarType.Visible = false;
					break;
			}

			UpdateAvailableIndicators();
		}

		private void OnEntryCarChanged()
		{
			if(entryCar.Subject is Car car)
			{
				var activeCarVersion = car.GetActiveCarVersion();
				if(activeCarVersion.IsRaskat && activeCarVersion.IsCompanyCar)
				{
					ViewModel.ShowCantSelectRaskatCarMessage();
					entryCar.Subject = null;
					return;
				}

				comboCompanyCarType.Sensitive = false;
				comboDriverCarKind.Sensitive = false;
				comboIsRaskat.Sensitive = false;
				enumComboOwnType.Sensitive = false;
				enumComboOwnType.SelectedItem = activeCarVersion.IsCompanyCar ? CarOwnType.Company : CarOwnType.Driver;

				if(enumComboOwnType.SelectedItem is CarOwnType.Company)
				{
					switch(car.CarModel.TypeOfUse)
					{
						case CarTypeOfUse.Largus:
							comboCompanyCarType.SelectedItem = CompanyCarType.Largus;
							break;
						case CarTypeOfUse.GAZelle:
							comboCompanyCarType.SelectedItem = CompanyCarType.Gazelle;
							break;
						default:
							throw new InvalidOperationException();
					}
				}
				else
				{
					comboDriverCarKind.SelectedItem = car.DriverCarKind ?? (object)SpecialComboState.All;
					comboIsRaskat.SelectedItem = activeCarVersion.IsRaskat ? AllYesNo.Yes : AllYesNo.No;
				}
			}
			else
			{
				enumComboOwnType.Sensitive = true;
				comboDriverCarKind.Sensitive = true;
				comboCompanyCarType.Sensitive = true;
				comboIsRaskat.Sensitive = true;
			}

			OnComboOwnTypeChanged();
		}

		protected async void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
			var extension = ".xlsx";

			var filechooser = new FileChooserDialog("Сохранить отчет...",
				null,
				FileChooserAction.Save,
				"Отменить", ResponseType.Cancel,
				"Сохранить", ResponseType.Accept)
			{
				DoOverwriteConfirmation = true,
				CurrentName = $"{Tab.TabName} {ViewModel.Report.CreationDate:yyyy-MM-dd-HH-mm}{extension}"
			};

			var excelFilter = new FileFilter
			{
				Name = $"Документ Microsoft Excel ({extension})"
			};

			excelFilter.AddMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			excelFilter.AddPattern($"*{extension}");
			filechooser.AddFilter(excelFilter);

			if(filechooser.Run() == (int)ResponseType.Accept)
			{
				var path = filechooser.Filename;

				if(!path.Contains(extension))
				{
					path += extension;
				}

				filechooser.Hide();

				ViewModel.IsSaving = true;

				await Task.Run(() => 
				{
					try
					{
						ybuttonSave.Label = "Отчет сохраняется...";
						ViewModel.ExportReport(path);
					}
					finally
					{
						Application.Invoke((s, eventArgs) =>
						{
							ViewModel.IsSaving = false;
							ybuttonSave.Label = "Сохранить";
						});
					}
				});
			}

			filechooser.Destroy();
		}

		protected async void OnButtonCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource = new CancellationTokenSource();

			ViewModel.IsGenerating = true;

			_generationTask = Task.Run(async () =>
			{
				try
				{
					var report = await ViewModel.ActionGenerateReport(ViewModel.ReportGenerationCancelationTokenSource.Token);

					Application.Invoke((s, eventArgs) =>
					{
						ViewModel.Report = report;
					});
				}
				catch(OperationCanceledException)
				{
					Application.Invoke((s, eventArgs) =>
					{
						ViewModel.ShowWarning("Формирование отчета было прервано");
					});
				}
				catch(Exception ex)
				{
					Application.Invoke((s, eventArgs) =>
					{
						throw ex;
					});
				}
				finally
				{
					Application.Invoke((s, eventArgs) =>
					{
						ViewModel.IsGenerating = false;
					});
				}
			}, ViewModel.ReportGenerationCancelationTokenSource.Token);

			await _generationTask;
		}

		protected void OnButtonAbortCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource.Cancel();
			ViewModel.CanCancelGenerate = false;
		}
	}
}
