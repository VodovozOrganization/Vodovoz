using System;
using System.Collections.Generic;
using NHibernate.Criterion;
using QS.DomainModel.UoW;
using Vodovoz.Domain.Client;

namespace Vodovoz.EntityRepositories.CallTasks
{
	public class CallTaskRepository : ICallTaskRepository
	{
		public string GetCommentsByDeliveryPoint(IUnitOfWork UoW, DeliveryPoint deliveryPoint, CallTask currentCallTask)
		{
			CallTask callTaskAlias = null;
			string comments = String.Empty;
			var tasks = UoW.Session.QueryOver(() => callTaskAlias)
				.Where(x => x.DeliveryPoint.Id == deliveryPoint.Id)
				.And(x => x.Id != currentCallTask.Id)
				.List();
			foreach(var task in tasks)
				comments += task.Comment;
			return comments;
		}

		public IEnumerable<CallTask> GetAutoGeneratedTask(IUnitOfWork UoW, Domain.Orders.Order order, CallTaskStatus? taskStatus = null)
		{
			CallTask callTaskAlias = null;
			return UoW.Session.QueryOver(() => callTaskAlias)
					.Where(x => x.SourceDocumentId.Value == order.Id)
					.And(x => x.Source == TaskSource.AutoFromOrder)
					.And(x => x.Comment == null)
					.And(x => !x.IsTaskComplete)
					.And(x => taskStatus == null || x.TaskState == taskStatus.Value)
					.Take(1)
					.List();
		}

		public IEnumerable<CallTask> GetActiveTaskByDeliveryPoint(IUnitOfWork UoW, DeliveryPoint deliveryPoint, CallTaskStatus? taskStatus = null, int? limit = null)
		{
			CallTask callTaskAlias = null;
			DeliveryPoint deliveryPointAlias = null;
			var tasks = UoW.Session.QueryOver(() => callTaskAlias)
				.JoinAlias(x => x.DeliveryPoint, () => deliveryPointAlias, NHibernate.SqlCommand.JoinType.LeftOuterJoin)
					.Where(() => deliveryPointAlias.Id == deliveryPoint.Id)
					.And(x => !x.IsTaskComplete)
					.And(x => taskStatus == null || x.TaskState == taskStatus.Value);

			if(limit.HasValue)
				tasks.Take(limit.Value);

			return tasks.List();
		}

		public IEnumerable<CallTask> GetActiveSelfDeliveryTaskByCounterparty(IUnitOfWork UoW, Counterparty counterparty, CallTaskStatus? taskStatus = null, int? limit = null)
		{
			CallTask callTaskAlias = null;
			DeliveryPoint deliveryPointAlias = null;
			Counterparty counterpartyAlias = null;

			var tasks = UoW.Session.QueryOver(() => callTaskAlias)
				.JoinAlias(() => callTaskAlias.DeliveryPoint, () => deliveryPointAlias, NHibernate.SqlCommand.JoinType.LeftOuterJoin)
				.JoinAlias(() => callTaskAlias.Counterparty, () => counterpartyAlias, NHibernate.SqlCommand.JoinType.LeftOuterJoin)
					.Where(Restrictions.On(() => deliveryPointAlias.Id).IsNull)
					.And(() => counterpartyAlias.Id == counterparty.Id)
					.And(x => !x.IsTaskComplete);

			if(taskStatus.HasValue)
				tasks = tasks.Where(() => callTaskAlias.TaskState == taskStatus.Value);
			if(limit.HasValue)
				tasks.Take(limit.Value);

			return tasks.List();
		}
	}
}
