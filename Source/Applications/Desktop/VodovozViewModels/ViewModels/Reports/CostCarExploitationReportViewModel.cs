using Autofac;
using ClosedXML.Report;
using Gamma.Utilities;
using QS.Dialog;
using QS.DomainModel.NotifyChange;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Project.Domain;
using QS.Project.Services.FileDialog;
using QS.Services;
using QS.Utilities.Enums;
using QS.ViewModels;
using QS.ViewModels.Control.EEVM;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.EntityRepositories.Logistic;
using Vodovoz.Settings.Car;
using Vodovoz.ViewModels.Journals.FilterViewModels.Logistic;
using Vodovoz.ViewModels.Journals.JournalViewModels.Logistic;
using Vodovoz.ViewModels.ViewModels.Logistic;
using Vodovoz.ViewModels.Widgets.Cars.CarModelSelection;

namespace Vodovoz.ViewModels.ViewModels.Reports
{
	public class CostCarExploitationReportViewModel : DialogTabViewModelBase
	{
		private readonly IEntityChangeWatcher _entityChangeWatcher;
		private readonly IFileDialogService _fileDialogService;
		private readonly ICarEventRepository _carEventRepository;
		private readonly ICarSettings _carSettings;
		private const string _templatePath = @".\Reports\Cars\ReportOnTheCostsOfOperatingCars.xlsx";

		private IList<CarTypeOfUse> _selectedCarTypeOfUse;
		private CarModelSelectionFilterViewModel _carModelSelectionFilterViewModel;

		public CostCarExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			INavigationManager navigation,
			ViewModelEEVMBuilder<Car> carViewModelBuilder,
			IEntityChangeWatcher entityChangeWatcher,
			IFileDialogService fileDialogService,
			ICarEventRepository carEventRepository,
			ICarSettings carSettings) : base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Затраты при эксплуатации ТС";

			var now = DateTime.Now;
			StartDate = new DateTime(now.Year, now.Month, 1).AddMonths(-1);
			EndDate = StartDate.AddMonths(1).AddDays(-1);

			CarEventTypeNodes = GetCarEventTypes();
			SelectedCarTypeOfUse = EnumHelper.GetValuesList<CarTypeOfUse>();
			SelectedCarOwnTypes = EnumHelper.GetValuesList<CarOwnType>();

			_fileDialogService = fileDialogService ?? throw new ArgumentNullException(nameof(fileDialogService));
			_entityChangeWatcher = entityChangeWatcher ?? throw new ArgumentNullException(nameof(entityChangeWatcher));
			UpdateOnChanges(typeof(CarEvent));
			_carEventRepository = carEventRepository ?? throw new ArgumentNullException(nameof(carEventRepository));
			_carSettings = carSettings ?? throw new ArgumentNullException(nameof(carSettings));

			CarEntryViewModel = carViewModelBuilder.SetUnitOfWork(UoW)
				.SetViewModel(this)
				.ForProperty(this, x => x.Car)
				.UseViewModelDialog<CarViewModel>()
				.UseViewModelJournalAndAutocompleter<CarJournalViewModel, CarJournalFilterViewModel>(
					filter =>
					{
					})
				.Finish();

			ConfigureCarModelSelectionFilter();
		}

		public IEntityEntryViewModel CarEntryViewModel { get; }
		public CancellationTokenSource ReportGenerationCancelationTokenSource { get; set; }
		public ReportOnTheCostsOfOperatingCars Report { get; set; }
		public DateTime StartDate { get; set; }
		public DateTime EndDate { get; set; }
		public Car Car { get; set; }
		public IList<CarTypeOfUse> SelectedCarTypeOfUse
		{
			get => _selectedCarTypeOfUse;
			set
			{
				_selectedCarTypeOfUse = value;
				OnSelectedCarTypeOfUseListContentChanged();
			}
		}
		public IList<CarEventTypeNode> CarEventTypeNodes { get; }
		public IList<CarOwnType> SelectedCarOwnTypes { get; set; }
		public bool ExcludeCarPartsCost { get; set; }

		public void OnSelectedCarTypeOfUseListContentChanged()
		{
			if(_carModelSelectionFilterViewModel != null)
			{
				UpdateCarModelsList();
			}
		}

		public CarModelSelectionFilterViewModel CarModelSelectionFilterViewModel => _carModelSelectionFilterViewModel;

		private void ConfigureCarModelSelectionFilter()
		{
			_carModelSelectionFilterViewModel = new CarModelSelectionFilterViewModel(UoW, _carSettings);
			UpdateCarModelsList();
		}

		private void UpdateCarModelsList()
		{
			_carModelSelectionFilterViewModel.SelectedCarTypesOfUse = SelectedCarTypeOfUse;
		}

		public void UpdateOnChanges(params Type[] entityTypes)
		{
			_entityChangeWatcher.BatchSubscribeOnEntity(BatchEntityChangeHandler, entityTypes);
		}

		public ReportOnTheCostsOfOperatingCars ActionGenerateReport(CancellationToken cancellationToken)
		{
			try
			{
				var report = Generate(cancellationToken);
				return report;
			}
			finally
			{
				UoW.Session.Clear();
			}
		}

		public void RowActivated(ReportOnTheCostsOfOperatingCarsRow carEvent)
		{
			NavigationManager.OpenViewModel<CarEventViewModel, IEntityUoWBuilder>(null, EntityUoWBuilder.ForOpen(carEvent.Id));
		}

		public void SaveReport()
		{
			var dialogSettings = new DialogSettings()
			{
				Title = "Сохранить",
				DefaultFileExtention = ".xlsx",
				FileName = $"{TabName} {DateTime.Now:yyyy-MM-dd-HH-mm}.xlsx"
			};
			var result = _fileDialogService.RunSaveFileDialog(dialogSettings);
			if(Report != null && result.Successful)
			{
				ExportReport(result.Path);
			}
		}

		public void GenerateReport()
		{
			ReportGenerationCancelationTokenSource = new CancellationTokenSource();
			Report = ActionGenerateReport(ReportGenerationCancelationTokenSource.Token);
			Report.UpdateIndex();
			OnPropertyChanged(() => Report);
		}

		private void ExportReport(string path)
		{
			var template = new XLTemplate(_templatePath);

			template.AddVariable(Report);
			template.Generate();

			template.SaveAs(path);
		}

		private ReportOnTheCostsOfOperatingCars Generate(CancellationToken cancellationToken)
		{
			var selectedCarEventTypes = GetSelectedCarEventTypes();
			var selectedSubjectView = selectedCarEventTypes.Count == CarEventTypeNodes.Count ? "Все" : string.Join(", ", selectedCarEventTypes.Select(e => e.Name));
			var seletedCarOwnType = Enum.GetNames(typeof(CarOwnType)).Length == SelectedCarOwnTypes.Count ? "Все" : string.Join(", ", SelectedCarOwnTypes.Select(cot => cot.GetEnumTitle()));
			var seletedCarTypeOfUse = Enum.GetNames(typeof(CarTypeOfUse)).Length == SelectedCarTypeOfUse.Count ? "Все" : string.Join(", ", SelectedCarTypeOfUse.Select(ct => ct.GetEnumTitle()));

			var result = new ReportOnTheCostsOfOperatingCars
			{
				StartDate = StartDate,
				EndDate = EndDate,
				SelectCar = Car?.Title ?? "Все авто",
				CarOwnType = seletedCarOwnType,
				CarTypeOfUse = seletedCarTypeOfUse,
				SelectedSubject = selectedSubjectView
			};

			var events = GetEvents().ToList();
			cancellationToken.ThrowIfCancellationRequested();

			for(int i = 0; i < events.Count(); i++)
			{
				result.Rows.Add(new ReportOnTheCostsOfOperatingCarsRow(events[i], ExcludeCarPartsCost));
			}

			return result;
		}

		private IEnumerable<CarEvent> GetEvents()
		{
			var eventTypes = GetSelectedCarEventTypesIds();
			var includedCarModelIds = _carModelSelectionFilterViewModel?.IncludedCarModelIds;
			var excludedCarModelIds = _carModelSelectionFilterViewModel?.ExcludedCarModelIds;

			return _carEventRepository.Get(
				UoW, 
				carEvent =>
					eventTypes.Contains(carEvent.CarEventType.Id)
					&& SelectedCarTypeOfUse.Contains(carEvent.Car.CarModel.CarTypeOfUse)
					&& carEvent.Car.CarVersions.Any(x =>
						SelectedCarOwnTypes.Contains(x.CarOwnType)
							&& x.StartDate <= carEvent.EndDate
							&& x.EndDate == null || x.EndDate >= carEvent.EndDate)
					&& (!includedCarModelIds.Any() || includedCarModelIds.Contains(carEvent.Car.CarModel.Id))
					&& (!excludedCarModelIds.Any() || !excludedCarModelIds.Contains(carEvent.Car.CarModel.Id))
					&& (Car == null || carEvent.Car == Car)
					&& carEvent.EndDate >= StartDate
					&& carEvent.EndDate <= EndDate)
				.OrderByDescending(x => x.EndDate);
		}

		private IList<CarEventTypeNode> GetCarEventTypes()
		{
			var defaultSelectedEvent = new string[] { "Ремонт", "Страховка" };
			var carEventTypes = UoW.Session.QueryOver<CarEventType>().WhereNot(et => et.IsArchive).List();
			var result = new List<CarEventTypeNode>();

			foreach(var item in carEventTypes)
			{
				var node = new CarEventTypeNode(item);
				if(defaultSelectedEvent.Contains(node.Title))
				{
					node.Selected = true;
				}
				result.Add(node);
			}
			return result;
		}

		private void BatchEntityChangeHandler(EntityChangeEvent[] changeEvents)
		{
			GenerateReport();
		}

		private IList<CarEventType> GetSelectedCarEventTypes()
		{
			return CarEventTypeNodes.Where(cetn => cetn.Selected).Select(cetn => cetn.CarEventType).ToList();
		}
		
		private IEnumerable<int> GetSelectedCarEventTypesIds() =>
			CarEventTypeNodes.Where(cetn => cetn.Selected).Select(cetn => cetn.CarEventType.Id).ToArray();
	}
}
