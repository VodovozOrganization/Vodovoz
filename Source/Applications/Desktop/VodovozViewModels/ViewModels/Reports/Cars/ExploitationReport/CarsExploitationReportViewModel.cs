using Autofac;
using Gamma.Utilities;
using QS.Dialog;
using QS.DomainModel.UoW;
using QS.Navigation;
using QS.Services;
using QS.Utilities.Enums;
using QS.ViewModels;
using QS.ViewModels.Control.EEVM;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.EntityRepositories.Logistic;
using Vodovoz.EntityRepositories.Undeliveries;
using Vodovoz.Services;
using Vodovoz.Settings.Car;
using Vodovoz.Settings.Logistics;
using Vodovoz.ViewModels.Dialogs.Logistic;
using Vodovoz.ViewModels.Journals.FilterViewModels.Logistic;
using Vodovoz.ViewModels.Journals.JournalViewModels.Logistic;
using Vodovoz.ViewModels.ViewModels.Logistic;
using Vodovoz.ViewModels.Widgets.Cars.CarModelSelection;

namespace Vodovoz.ViewModels.ViewModels.Reports.Cars.ExploitationReport
{
	public class CarsExploitationReportViewModel : DialogTabViewModelBase
	{
		private IInteractiveMessage _interactiveMessage;
		private readonly IRouteListRepository _routeListRepository;
		private readonly ICarRepository _carRepository;
		private readonly IUndeliveredOrdersRepository _undeliveredOrdersRepository;
		private readonly ICarEventSettings _carEventSettings;
		private readonly ICommonServices _commonServices;
		private readonly ILifetimeScope _scope;
		private readonly ICarSettings _carSettings;
		private readonly int _suburbWageDistrictId;

		private CarModelSelectionFilterViewModel _carModelSelectionFilterViewModel;

		private int _startMonth;
		private int _startYear;
		private bool _isHighlightFastDeliveryDays;

		private bool _isConditionalFormattingRequired;
		private CarsExploitationReport _report;

		private bool _canSave;
		private bool _isSaving;
		private bool _canCancelGenerate;
		private bool _isGenerating;
		private IList<CarTypeOfUse> _selctedTypesOfUse;
		private IList<Indicator> _selectedIndicators;

		public CarsExploitationReportViewModel(
			IUnitOfWorkFactory unitOfWorkFactory,
			IInteractiveService interactiveService,
			IRouteListRepository routeListRepository,
			ICarRepository carRepository,
			IUndeliveredOrdersRepository undeliveredOrdersRepository,
			INavigationManager navigation,
			IWageSettings wageSettings,
			ICarEventSettings carEventSettings,
			ICommonServices commonServices,
			ILifetimeScope scope,
			ICarSettings carSettings)
			: base(unitOfWorkFactory, interactiveService, navigation)
		{
			Title = "Аналитика эксплуатации ТС";

			_routeListRepository = routeListRepository ?? throw new ArgumentNullException(nameof(routeListRepository));
			_carRepository = carRepository ?? throw new ArgumentNullException(nameof(carRepository));
			_undeliveredOrdersRepository = undeliveredOrdersRepository ?? throw new ArgumentNullException(nameof(undeliveredOrdersRepository));
			_carEventSettings = carEventSettings ?? throw new ArgumentNullException(nameof(carEventSettings));
			_commonServices = commonServices ?? throw new ArgumentNullException(nameof(commonServices));
			_scope = scope ?? throw new ArgumentNullException(nameof(scope));
			_carSettings = carSettings ?? throw new ArgumentNullException(nameof(carSettings));
			_suburbWageDistrictId = (wageSettings ?? throw new ArgumentNullException(nameof(wageSettings)))
				.SuburbWageDistrictId;

			CarEntryViewModel = BuildCarEntryViewModel();

			_canSave = false;
			_isSaving = false;
			_canCancelGenerate = false;
			_isGenerating = false;

			_startMonth = DateTime.Now.Month;
			_startYear = DateTime.Now.Year;
			ConfigureCarModelSelectionFilter();

			var typesOfUse = EnumHelper.GetValuesList<CarTypeOfUse>().ToList();
			typesOfUse.Remove(CarTypeOfUse.Loader);
			typesOfUse.Remove(CarTypeOfUse.Truck);

			var carOwnTypes = EnumHelper.GetValuesList<CarOwnType>();

			SelectedTypesOfUse = typesOfUse;
			SelectedCarOwnTypes = carOwnTypes;
		}

		public CancellationTokenSource ReportGenerationCancelationTokenSource { get; set; }
		public IEntityEntryViewModel CarEntryViewModel { get; }

		private IEntityEntryViewModel BuildCarEntryViewModel()
		{
			var carViewModelBuilder = new CommonEEVMBuilderFactory<CarsExploitationReportViewModel>(this, this, UoW, NavigationManager, _scope);

			var viewModel = carViewModelBuilder
				.ForProperty(x => x.Car)
				.UseViewModelDialog<CarViewModel>()
				.UseViewModelJournalAndAutocompleter<CarJournalViewModel, CarJournalFilterViewModel>(
					filter =>
					{
						filter.Archive = false;
						filter.VisitingMasters = false;
						filter.RestrictedCarTypesOfUse = new List<CarTypeOfUse>(new[] { CarTypeOfUse.Largus, CarTypeOfUse.GAZelle });
						filter.SetFilterSensitivity(false);
						filter.CanChangeRestrictedCarOwnTypes = true;
					})
				.Finish();

			viewModel.CanViewEntity = _commonServices.CurrentPermissionService.ValidateEntityPermission(typeof(Car)).CanUpdate;

			return viewModel;
		}

		#region Параметры фильтров

		public DateTime StartDate => new DateTime(StartYear, StartMonth, 1);

		public int StartMonth
		{
			get => _startMonth;
			set => SetField(ref _startMonth, value);
		}

		public int StartYear
		{
			get => _startYear;
			set => SetField(ref _startYear, value);
		}

		public bool IsHighlightFastDeliveryDays
		{
			get => _isHighlightFastDeliveryDays;
			set => SetField(ref _isHighlightFastDeliveryDays, value);
		}

		public IndicatorsType IndicatorsType { get; set; }
		public DeliveryType? DeliveryType { get; set; }
		public IEnumerable<CarOwnType> SelectedCarOwnTypes { get; set; }
		public IList<CarTypeOfUse> SelectedTypesOfUse
		{
			get => _selctedTypesOfUse;
			set
			{
				SetField(ref _selctedTypesOfUse, value);
				UpdateCarModelsList();
			}
		}

		public Car Car { get; set; }
		public bool ShowCarsWithoutData { get; set; }
		public bool IsShowNotUsedInDelivery { get; set; }

		public IList<Indicator> SelectedIndicators
		{
			get => _selectedIndicators;
			set
			{
				SetField(ref _selectedIndicators, value);
				OnPropertyChanged(nameof(CanGenerate));
			}
		}

		#endregion

		public CarsExploitationReport Report
		{
			get => _report;
			set
			{
				SetField(ref _report, value);
				CanSave = _report != null;
			}
		}

		public bool CanSave
		{
			get => _canSave;
			set => SetField(ref _canSave, value);
		}

		public bool IsSaving
		{
			get => _isSaving;
			set
			{
				SetField(ref _isSaving, value);
				CanSave = !IsSaving;
			}
		}

		public bool CanGenerate => !IsGenerating && SelectedIndicators != null && SelectedIndicators.Any();

		public bool CanCancelGenerate
		{
			get => _canCancelGenerate;
			set => SetField(ref _canCancelGenerate, value);
		}

		public bool IsGenerating
		{
			get => _isGenerating;
			set
			{
				SetField(ref _isGenerating, value);
				OnPropertyChanged(nameof(CanGenerate));
				CanCancelGenerate = IsGenerating;
			}
		}

		public bool IsConditionalFormattingRequired
		{
			get => _isConditionalFormattingRequired;
			set => SetField(ref _isConditionalFormattingRequired, value);
		}

		private void UpdateCarModelsList()
		{
			if(_carModelSelectionFilterViewModel != null)
			{
				_carModelSelectionFilterViewModel.SelectedCarTypesOfUse = SelectedTypesOfUse;
			}
		}

		public async Task<CarsExploitationReport> ActionGenerateReport(CancellationToken cancellationToken)
		{
			try
			{
				var report = await CarsExploitationReport.CreateCarsExploitationReport(
					UoW,
					_routeListRepository,
					_carRepository,
					_undeliveredOrdersRepository,
					StartDate,
					IndicatorsType,
					DeliveryType,
					SelectedCarOwnTypes,
					_carEventSettings.CarsExcludedFromReportsIds,
					CarModelSelectionFilterViewModel.IncludedCarModelIds,
					CarModelSelectionFilterViewModel.ExcludedCarModelIds,
					SelectedTypesOfUse,
					Car,
					SelectedIndicators,
					ShowCarsWithoutData,
					IsShowNotUsedInDelivery,
					_suburbWageDistrictId,
					cancellationToken);

				return report;
			}
			finally
			{
				UoW.Session.Clear();
			}
		}

		public CarModelSelectionFilterViewModel CarModelSelectionFilterViewModel => _carModelSelectionFilterViewModel;

		private void ConfigureCarModelSelectionFilter()
		{
			_carModelSelectionFilterViewModel = new CarModelSelectionFilterViewModel(UoW, _carSettings);
			UpdateCarModelsList();
		}

		public void ShowWarning(string message)
		{
			_interactiveMessage.ShowMessage(ImportanceLevel.Warning, message);
		}

		public void ExportReport(string path)
		{
			if(Report is null)
			{
				return;
			}

			Report.ExportToExcel(path, IsConditionalFormattingRequired, IsHighlightFastDeliveryDays);
		}

		public void ShowInfoWindow()
		{
			var info =
				"Условные обозначения отчёта: \"К\" - ТС компании, \"В\" - ТС водителя, \"Р\" - ТС в раскате, \"Л\" - Легковой (Ларгус), \"Г\" - Грузовой (Газель), \"Т\" - Фургон (Transit Mini).\n" +
				"Пояснение к столбикам: \"П\" - принадлежность. \"Т\" - тип ТС. \"№\" - номер. \"1,2,3\" - даты в месяце.\n" +
				"Данные для столбцов  \"Принадлежность\" и  \"Статус\"  берутся из карточки сотрудника (водителя)\n" +
				"Выборка в отчёт идёт согласно фильтрам и доп. условиям:\n" +
				" - Не попадают архивные автомобили, фуры, а также автомобили, привязанные к выездным мастерам.\n" +
				"Пояснения к показателям:\n\n" +
				"Условные обозначения: \"Факт\" - фильтр по фактическим данным. \"План\" - фильтр по планируемым данным.\n\n" +

				$"\"{Indicator.Trips.GetEnumTitle()}\": Сумма Кол-ва МЛ.\n" +
				$"Факт: не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n\n" +

				$"\"{Indicator.WageDistricts.GetEnumTitle()}\": Если за день есть хоть один адрес в Пригороде - П, иначе Г.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"\"{Indicator.MileagePlan.GetEnumTitle()}\": Сумма планируемого расстояния по всем МЛ.\n" +
				"Не отображается для \"В\".\n" +
				"Факт: не отображается.\n\n" +

				$"\"{Indicator.MileageRecalculated.GetEnumTitle()}\": Сумма пересчитанного расстояния по всем МЛ.\n" +
				"Не отображается для \"В\".\n" +
				"План: не отображается.\n\n" +

				$"\"{Indicator.MileageConfirmed.GetEnumTitle()}\": Сумма подтверждённого расстояния по всем МЛ.\n" +
				"Не отображается для \"В\".\n" +
				"План: не отображается.\n\n" +

				$"\"{Indicator.FuelOverspending.GetEnumTitle()}\": Разница подтверждённого и пересчитанного расстояний по всем МЛ.\n" +
				"Не отображается для \"В\".\n" +
				"План: не отображается.\n\n" +

				$"\"{Indicator.Undeliveries.GetEnumTitle()}\": Сумма кол-ва отмен заказов по всем МЛ по вине Подразделений логистики и Водителей.\n" +
				"План: не отображается.\n\n" +

				$"\"{Indicator.LateArrivals.GetEnumTitle()}\": Сумма кол-ва опозданий по всем адресам по всем МЛ.\n" +
				"План: не отображается.\n\n" +

				$"\"{Indicator.Addresses.GetEnumTitle()}\": Сумма кол-ва адресов во всех МЛ.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"\"{Indicator.Forwarders.GetEnumTitle()}\": Сумма кол-ва МЛ с экспедиторами.\n" +
				"Не отображается для \"К Л\".\n" +
				$"Факт: Не считает МЛ, у которых все адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n\n" +

				$"\"{Indicator.Districts.GetEnumTitle()}\": Сумма кол-ва адресов во всех МЛ, не попадающих в районы, закрепленные за водителем в МЛ.\n" +
				"Версия приоритетов районов водителя подбирается аналогично версии графиков.\n" +
				$"Факт: не считаются адреса в статусах {RouteListItemStatus.Transfered.GetEnumTitle()}, {RouteListItemStatus.Overdue.GetEnumTitle()} и {RouteListItemStatus.Canceled.GetEnumTitle()}.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n\n" +

				$"\"{Indicator.Loading19Litres.GetEnumTitle()}, {Indicator.LoadingKilograms.GetEnumTitle()}, {Indicator.CargoDailyNormKilograms.GetEnumTitle()}, {Indicator.LoadingCubicMeters.GetEnumTitle()}\": Загрузка в процентах.\n" +
				"Факт: считаются только выполненные адреса.\n" +
				"План: не считаются адреса, перенесённые в этот МЛ.\n" +
				$"{Indicator.CargoDailyNormKilograms.GetEnumTitle()} показатель загруженности в %, исходя из нормы (в кг) в день (заполняется в справочнике - кнопка \"Настройка нормы\")\n\n" +

				$"\"{Indicator.LoadingAverage.GetEnumTitle()}\": Cреднее по 19л, кг, м3.\n\n" +

				$"\"{Indicator.Odometer.GetEnumTitle()}\": Расхождение одометра с подтверждённым километражем.\n\n" +

				$"\"{Indicator.TotalRow.GetEnumTitle()}\": Итоговые значения, расчитываются для показателей:\n" +
				"Рейсы: среднее значение из расчета всех календарных дней(эффективность использования авто).\n" +
				"События ТС и Город/ Пригород: расчет не ведется.\n" +
				"Загрузка, 19л, кг, м3: среднее значение из рабочих дней. Исключаем дни без МЛ.\n" +
				"Одометр / Расхождения: сумма расхождений.\n" +
				"Остальные события: сумма значений.\n" +
				$"Для показателя {Indicator.Trips.GetEnumTitle()} в строке Всего отображается среднее значение для всех строк, в том числе учитываются водители без МЛ в этот день.\n\n" +

				$"Если в фильтре \"Тип доставки\" выбрано значение \"Обычная доставка\", то будут учитываться только те авто, у которых за период имеется хотя-бы один МЛ с выполненным заказом с обычной доставкой \n" +
				$"Если в фильтре \"Тип доставки\" выбрано значение \"Экспресс доставка\", то будут учитываться только те авто, у которых за период имеется хотя-бы один МЛ с выполненным заказом с экспресс доставкой \n" +
				$"Если в фильтре установлена галочка \"Подкрашивать дни с экспресс доставкой\", то ячейки дней, в которых данное авто выполняло заказы с экспресс доставкой будут подкрашены желтым " +
				$"(кроме строки \"Рейсы\" и кроме подкрашенных ячеек строки \"Город/Пригород\")\n\n" +

				$"Если в указанный период отчета у авто изменилась версия и установлено новое значение принадлежности, которое не выбрано в фильтре отчета, то ячейки дней с не выбранной принадлежностью будут окрашены в голубой\n\n" +

				$"Если за авто нашей организации не закреплен водитель, и этот авто разово использует наемный водитель, то закрепленный водитель будет отображаться из последнего МЛ с этим авто в формате \"МЛ: Фамилия И.О.\", если таких МЛ нет, то \"Нет МЛ\"";

			_interactiveMessage.ShowMessage(ImportanceLevel.Info, info, "Информация");
		}

		public void ShowCargoDailyNorms()
		{
			NavigationManager.OpenViewModel<CargoDailyNormViewModel, CarTypeOfUse[]>(this, new CarTypeOfUse[] { CarTypeOfUse.Truck });
		}

		public void SetInteractiveMessageService(IInteractiveMessage interactiveMessage) =>
			_interactiveMessage = interactiveMessage ?? throw new ArgumentNullException(nameof(interactiveMessage));
	}
}
