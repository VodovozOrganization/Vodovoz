using Gamma.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using Vodovoz.Core.Domain.Employees;
using Vodovoz.Domain.Logistic.Cars;

namespace Vodovoz.ViewModels.ViewModels.Reports.Cars.ExploitationReport
{
	public class CarsExploitationReportRow
	{
		public int? RowNumber { get; set; }
		public int? CarOrderNumber { get; set; }
		public IEnumerable<CarVersion> CarVersions { get; set; } = new List<CarVersion>();
		public IEnumerable<CarOwnType> CarOwnTypesSelectedInFilter { get; set; } = new List<CarOwnType>();

		public string CarOwnTypeName =>
			string.Join(", ", CarVersions.Select(x => GetCarOwnTypeLetter(x.CarOwnType)));

		private string GetCarOwnTypeLetter(CarOwnType сarOwnType)
		{
			switch(сarOwnType)
			{
				case CarOwnType.Company:
					return "K";
				case CarOwnType.Raskat:
					return "Р";
				case CarOwnType.Driver:
					return "В";
				default:
					throw new NotSupportedException($"CarOwnType {сarOwnType} is not supported");
			}
		}

		public CarTypeOfUse? CarTypeOfUse { get; set; }

		public string CarTypeOfUseName
		{
			get
			{
				if(CarTypeOfUse == null)
				{
					return "";
				}

				switch(CarTypeOfUse)
				{
					case Domain.Logistic.Cars.CarTypeOfUse.Largus:
						return "Л";
					case Domain.Logistic.Cars.CarTypeOfUse.Truck:
						return "Ф";
					case Domain.Logistic.Cars.CarTypeOfUse.GAZelle:
						return "Г";
					case Domain.Logistic.Cars.CarTypeOfUse.Loader:
						return "П";
					case Domain.Logistic.Cars.CarTypeOfUse.Minivan:
						return "Т";
					default:
						throw new NotSupportedException($"CarTypeOfUse {CarTypeOfUse} is not supported");
				}
			}
		}

		public EmployeeStatus? DriverStatus { get; set; }
		public string DriverStatusName
		{
			get => Indicator == Indicator.TotalRow
				? ""
				: DriverStatus == null ? "Нет" : DriverStatus.Value.GetEnumTitle();
		}

		public CarOwnType? DriverOfCarOwnType { get; set; }

		public string DriverOfCarOwnTypeName
		{
			get => Indicator == Indicator.TotalRow
				? ""
				: DriverOfCarOwnType == null ? "Нет" : DriverOfCarOwnType.Value.GetEnumTitle();
		}

		public string RegNumber { get; set; }
		public Indicator Indicator { get; set; }
		public string IndicatorName => Indicator.GetEnumTitle();
		public string AssignedDriver { get; set; }
		public string GeographicalGroups { get; set; }
		public object[] Days { get; set; }
		public DateTime RowDate { get; set; }
		public Indicator? TotalRowIndicator { get; set; }
		public decimal? DaysTotal { get; set; }
		public IEnumerable<int> DaysWithFastDeliveryOrders { get; set; }

		public bool IsCarVersionChangedToNotSelectedInFilter(DateTime date)
		{
			var carVersionOnDate = CarVersions
				.Where(cv => cv.StartDate <= date && (cv.EndDate == null || cv.EndDate.Value >= date))
				.FirstOrDefault();

			var isCarVersionChangedToNotSelectedInFilter =
				carVersionOnDate != null && !CarOwnTypesSelectedInFilter.Contains(carVersionOnDate.CarOwnType);

			return isCarVersionChangedToNotSelectedInFilter;
		}
	}
}
