using Autofac;
using Gamma.Utilities;
using NHibernate;
using NHibernate.Criterion;
using NHibernate.Linq;
using QS.DomainModel.UoW;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Vodovoz.Domain.Employees;
using Vodovoz.Domain.Logistic;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.Domain.Orders;
using Vodovoz.EntityRepositories.Logistic;
using Vodovoz.ViewModels.Dialogs.Logistic;
using Order = Vodovoz.Domain.Orders.Order;

namespace Vodovoz.ViewModels.ViewModels.Reports.Cars.ExploitationReport
{
	public class CarsExploitationReport
	{
		private IUnitOfWork _uow;
		private ICarRepository _carRepository;
		private IRouteListRepository _routeListRepository;
		private DeliveryType? _deliveryType;
		private int[] _includedCarModelIds;
		private int[] _excludedCarModelIds;
		private bool _showCarsWithoutData;
		private int _suburbWageDistrictId;

		private CarsExploitationReport() { }

		public DateTime CreationDate { get; private set; }
		public DateTime StartDate { get; private set; }
		public DateTime EndDate { get; private set; }
		public IndicatorsType IndicatorsType { get; private set; }
		public CarOwnType CarOwnType { get; private set; }
		public CarTypeOfUse? CarTypeOfUse { get; private set; }
		public Car Car { get; private set; }
		public IList<Indicator> SelectedIndicators { get; private set; }
		public IList<CarsExploitationReportRow> Rows { get; private set; }
		public IList<CargoDailyNormNode> CargoDailyNorms { get; private set; } = new List<CargoDailyNormNode>();
		public string SelectedIndicatorsString => string.Join(", ", SelectedIndicators.Select(x => x.GetEnumTitle()));
		public string Filters => $"Тип индикаторов: {IndicatorsType.GetEnumTitle()}\n" +
			$"Принадлежность автомобиля: {CarOwnType.GetEnumTitle()}\n" +
			$"Тип автомобиля: {CarTypeOfUse?.GetEnumTitle() ?? "-"}\n" +
			$"Автомобиль: {Car?.Title ?? "-"}" +
			$"Выбранные индикаторы: {SelectedIndicatorsString}";
		public string CargoDailyNormsString =>
			$"{string.Join(", ", CargoDailyNorms.Select(x => string.Join(" ", x.CarTypeOfUse.GetEnumTitle(), x.Amount.ToString("F2"), x.Postfix)))}";
		public int[] DaysNumbers => Enumerable.Range(1, DateTime.DaysInMonth(StartDate.Year, StartDate.Month)).ToArray();

		private async Task<CarsExploitationReport> Generate(CancellationToken cancellationToken)
		{
			var routeLists =
				await _carRepository.GetCarsRouteLists(_uow, CarTypeOfUse, CarOwnType, Car, StartDate, EndDate, cancellationToken);

			cancellationToken.ThrowIfCancellationRequested();

			var carIds = await _carRepository.GetCarsIdsHavingRouteLists(
				_uow,
				CarTypeOfUse,
				CarOwnType,
				Car,
				_includedCarModelIds,
				_excludedCarModelIds,
				StartDate,
				EndDate,
				_deliveryType == DeliveryType.Fast,
				_deliveryType == DeliveryType.Common,
				cancellationToken);

			IList<Car> cars = routeLists
				.Where(routeList =>
					(!_includedCarModelIds.Any() || _includedCarModelIds.Contains(routeList.Car.CarModel.Id))
					&& (!_excludedCarModelIds.Any() || !_excludedCarModelIds.Contains(routeList.Car.CarModel.Id))
					&& carIds.Contains(routeList.Car.Id))
				.Select(routeList => routeList.Car)
				.Distinct()
				.ToList();

			var ordersIds = routeLists.SelectMany(routeList => routeList.Addresses.Select(address => address.Order.Id)).ToList();

			if(SelectedIndicators.Contains(Indicator.WageDistricts)
				|| SelectedIndicators.Contains(Indicator.LoadingCubicMeters)
				|| SelectedIndicators.Contains(Indicator.LoadingKilograms)
				|| SelectedIndicators.Contains(Indicator.CargoDailyNormKilograms)
				|| SelectedIndicators.Contains(Indicator.Loading19Litres)
				|| SelectedIndicators.Contains(Indicator.LoadingAverage)
				|| SelectedIndicators.Contains(Indicator.LateArrivals)
				|| SelectedIndicators.Contains(Indicator.Undeliveries))
			{
				await TouchOrders(_uow, ordersIds, cancellationToken);
				cancellationToken.ThrowIfCancellationRequested();
			}

			IList<UndeliveredOrder> undeliveredOrders = new List<UndeliveredOrder>();

			if(SelectedIndicators.Contains(Indicator.Undeliveries))
			{
				undeliveredOrders = await GetUndeliveriesForOrders(_uow, ordersIds, cancellationToken);
				cancellationToken.ThrowIfCancellationRequested();
			}

			IList<CarEvent> carEvents = new List<CarEvent>();

			if(SelectedIndicators.Contains(Indicator.CarEvents))
			{
				carEvents = await _carRepository.GetCarEvents(
					_uow,
					CarTypeOfUse,
					_includedCarModelIds,
					_excludedCarModelIds,
					CarOwnType,
					Car,
					StartDate,
					EndDate,
					cancellationToken);

				if(!SelectedIndicators.Contains(Indicator.Trips))
				{
					cars = cars.Concat(carEvents.Select(carEvent => carEvent.Car)).Distinct().ToList();
				}
			}

			if(_showCarsWithoutData && !_deliveryType.HasValue)
			{
				cars = await _carRepository.GetCarsWithoutData(
					_uow,
					CarTypeOfUse,
					_includedCarModelIds,
					_excludedCarModelIds,
					CarOwnType,
					Car,
					StartDate,
					EndDate,
					cancellationToken);
			}

			cars = cars.OrderBy(c => c.CarModel.CarTypeOfUse)
				.ThenBy(c => c.Id)
				.ToList();

			cancellationToken.ThrowIfCancellationRequested();

			Rows = await GenerateRows(cars, SelectedIndicators, IndicatorsType, routeLists, carEvents, undeliveredOrders, StartDate,
				CarOwnType, _showCarsWithoutData, CargoDailyNorms, cancellationToken);

			FillRowsDaysTotal(Rows, StartDate);

			return this;
		}

		private static List<CargoDailyNormNode> GetCargoDailyNorms(IRouteListRepository routeListRepository)
		{
			var carTypeOfUses = Enum.GetValues(typeof(CarTypeOfUse)).Cast<CarTypeOfUse>();

			List<CargoDailyNormNode> cargoDailyNorms = new List<CargoDailyNormNode>();

			foreach(var carTypeOfUse in carTypeOfUses)
			{
				cargoDailyNorms.Add(new CargoDailyNormNode
				{
					CarTypeOfUse = carTypeOfUse,
					Amount = routeListRepository.GetCargoDailyNorm(carTypeOfUse)
				});
			}

			return cargoDailyNorms;
		}

		private async Task<IList<CarsExploitationReportRow>> GenerateRows(
			IList<Car> cars,
			IList<Indicator> selectedIndicators,
			IndicatorsType indicatorsType,
			IList<RouteList> routeLists,
			IList<CarEvent> carEvents,
			IList<UndeliveredOrder> undeliveredOrders,
			DateTime startDate,
			CarOwnType carOwnType,
			bool showCarsWithoutData,
			IList<CargoDailyNormNode> cargoDailyNorms,
			CancellationToken cancellationToken)
		{
			var daysInMonth = DateTime.DaysInMonth(startDate.Year, startDate.Month);

			var rows = new List<CarsExploitationReportRow>();

			foreach(var carItem in cars)
			{
				string carGeoGroups = string.Join(", ", carItem.GeographicGroups.Select(x => x.Name));
				string carDriverFormattedName = GetDriverFormattedName(carItem.Driver);

				var daysWithFastDeliveryOrders =
					routeLists
					.Where(rl => rl.Car.Id == carItem.Id)
					.SelectMany(rl => rl.Addresses)
					.Where(a => a.Status == RouteListItemStatus.Completed && a.Order.IsFastDelivery)
					.Select(a => a.RouteList.Date.Day)
					.Distinct();

				if(selectedIndicators.Contains(Indicator.Trips))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Trips, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessTripsDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.CarEvents))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.CarEvents, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessCarEventsDays(daysInMonth, carEvents, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => !string.IsNullOrEmpty(day as string)))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.WageDistricts))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.WageDistricts, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessWageDistrictsDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.Odometer))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Odometer, carOwnType, carGeoGroups, carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessOdometerDays(daysInMonth, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.MileagePlan))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.MileagePlan, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessMileagePlanDays(daysInMonth, routeLists, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.MileageRecalculated))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.MileageRecalculated, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessMileageRecalculatedDays(daysInMonth, routeLists, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.MileageConfirmed))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.MileageConfirmed, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessMileageConfirmedDays(daysInMonth, routeLists, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.FuelOverspending))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.FuelOverspending, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessFuelOverspendingDays(daysInMonth, routeLists, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.Undeliveries))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Undeliveries, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessUndeliveriesDays(daysInMonth, routeLists, undeliveredOrders, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.LateArrivals))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.LateArrivals, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessLateArrivalsDays(daysInMonth, routeLists, carItem, startDate);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				// Indicator.WorkSchedules - не используется

				if(selectedIndicators.Contains(Indicator.Districts))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Districts, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessDistrictsDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.Addresses))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Addresses, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessAddressesDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.Forwarders))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.Forwarders, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessForwardersDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.LoadingAverage))
				{
					var newRow = CreateCarExploitationReportRow(carItem, Indicator.LoadingAverage, carOwnType, carGeoGroups,
						carDriverFormattedName, daysWithFastDeliveryOrders);

					newRow.Days = await ProcessLoadingAverageDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

					if(showCarsWithoutData || newRow.Days.Any(day => day != null))
					{
						rows.Add(newRow);
						newRow.RowNumber = rows.Count;
					}
				}

				if(selectedIndicators.Contains(Indicator.Loading19Litres))
				{
					if(carItem.MaxBottles > 0)
					{
						var newRow = CreateCarExploitationReportRow(carItem, Indicator.Loading19Litres, carOwnType, carGeoGroups,
							carDriverFormattedName, daysWithFastDeliveryOrders);

						newRow.Days = await ProcessLoading19LitresDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

						if(showCarsWithoutData || newRow.Days.Any(day => day != null))
						{
							rows.Add(newRow);
							newRow.RowNumber = rows.Count;
						}
					}
				}

				if(selectedIndicators.Contains(Indicator.LoadingKilograms))
				{
					if(carItem.CarModel.MaxWeight > 0)
					{
						var newRow = CreateCarExploitationReportRow(carItem, Indicator.LoadingKilograms, carOwnType, carGeoGroups,
							carDriverFormattedName, daysWithFastDeliveryOrders);

						newRow.Days = await ProcessLoadingKilogramsDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

						if(showCarsWithoutData || newRow.Days.Any(day => day != null))
						{
							rows.Add(newRow);
							newRow.RowNumber = rows.Count;
						}
					}
				}

				if(selectedIndicators.Contains(Indicator.CargoDailyNormKilograms))
				{
					if(carItem.CarModel.MaxWeight > 0)
					{
						var newRow = CreateCarExploitationReportRow(carItem, Indicator.CargoDailyNormKilograms, carOwnType, carGeoGroups,
							carDriverFormattedName, daysWithFastDeliveryOrders);

						newRow.Days = await ProcessCargoDailyNormKilogramsDays(daysInMonth, routeLists, carItem, startDate, indicatorsType, cargoDailyNorms);

						if(showCarsWithoutData || newRow.Days.Any(day => day != null))
						{
							rows.Add(newRow);
							newRow.RowNumber = rows.Count;
						}
					}
				}

				if(selectedIndicators.Contains(Indicator.LoadingCubicMeters))
				{
					if(carItem.CarModel.MaxVolume > 0)
					{
						var newRow = CreateCarExploitationReportRow(carItem, Indicator.LoadingCubicMeters, carOwnType, carGeoGroups,
							carDriverFormattedName, daysWithFastDeliveryOrders);

						newRow.Days = await ProcessLoadingCubicMetersDays(daysInMonth, routeLists, carItem, startDate, indicatorsType);

						if(showCarsWithoutData || newRow.Days.Any(day => day != null))
						{
							rows.Add(newRow);
							newRow.RowNumber = rows.Count;
						}
					}
				}

				cancellationToken.ThrowIfCancellationRequested();
			}

			if(selectedIndicators.Count == 1
			   && rows.Any()
			   && !new[] { Indicator.CarEvents, Indicator.WageDistricts }.Contains(selectedIndicators.Single()))
			{
				var totalRow = GenerateTotalRow(rows, daysInMonth, selectedIndicators.Single());
				rows.Add(totalRow);
			}

			return rows;
		}

		private CarsExploitationReportRow CreateCarExploitationReportRow(Car car, Indicator indicator, CarOwnType carOwnType,
			string geoGroups, string carDriverFormattedName, IEnumerable<int> daysWithFastDeliveryOrders)
		{
			return new CarsExploitationReportRow
			{
				AssignedDriver = carDriverFormattedName,
				CarOrderNumber = car.OrderNumber ?? 0,
				CarOwnType = carOwnType,
				CarTypeOfUse = car.CarModel.CarTypeOfUse,
				Indicator = indicator,
				RegNumber = car.RegistrationNumber,
				GeographicalGroups = geoGroups,
				DaysWithFastDeliveryOrders = daysWithFastDeliveryOrders
			};
		}

		private CarsExploitationReportRow GenerateTotalRow(List<CarsExploitationReportRow> rows, int daysInMonth, Indicator indicator)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var totalRowValue = CalculateTotalRowForDay(rows, dayId, indicator);
				if(totalRowValue != null)
				{
					days[dayId] = Math.Round(totalRowValue.Value, 2);
				}
			}

			return new CarsExploitationReportRow
			{
				Indicator = Indicator.TotalRow,
				TotalRowIndicator = indicator,
				Days = days
			};
		}

		private decimal? CalculateTotalRowForDay(List<CarsExploitationReportRow> rows, int dayId, Indicator indicator)
		{
			if(indicator == Indicator.CarEvents || indicator == Indicator.WageDistricts)
			{
				return null;
			}

			if(indicator == Indicator.Trips)
			{
				return rows.Average(row =>
				{
					if(row.Days[dayId] == null)
					{
						return 0;
					}

					decimal.TryParse(row.Days[dayId].ToString(), out var value);

					return value;
				});
			}

			if(new[] { Indicator.LoadingAverage, Indicator.Loading19Litres, Indicator.LoadingKilograms, Indicator.CargoDailyNormKilograms, Indicator.LoadingCubicMeters }
			   .Contains(indicator))
			{
				var workRows = rows.Where(row => row.Days[dayId] != null);

				return workRows.Average(row =>
				{
					if(row.Days[dayId] == null)
					{
						return null;
					}

					decimal.TryParse(row.Days[dayId].ToString(), out var value);

					return value;
				});
			}

			if(indicator == Indicator.Odometer)
			{
				return rows.Sum(row =>
				{
					if(row.Days[dayId] == null)
					{
						return 0;
					}

					var odometer = row.Days[dayId].ToString();
					var index = odometer.IndexOf("/\n");
					decimal.TryParse(odometer.Substring(index + 2, odometer.Length - index - 2), out var value);
					return value;
				});
			}

			return rows.Sum(row =>
			{
				decimal.TryParse(row.Days[dayId]?.ToString(), out var value);
				return value;
			});
		}

		private void FillRowsDaysTotal(IList<CarsExploitationReportRow> rows, DateTime startDate)
		{
			foreach(var row in rows)
			{
				row.DaysTotal = CalculateDaysTotalForRow(row, startDate);
			}
		}

		private decimal? CalculateDaysTotalForRow(CarsExploitationReportRow row, DateTime startDate)
		{
			decimal? total;

			if(new[] { Indicator.CarEvents, Indicator.WageDistricts }.Contains(row.Indicator))
			{
				return null;
			}

			var isTotalRowAverageAllDays = row.Indicator == Indicator.TotalRow
										   && row.TotalRowIndicator == Indicator.Trips;

			if(row.Indicator == Indicator.Trips || isTotalRowAverageAllDays)
			{
				List<object> curDays = null;
				if(DateTime.Today.Month == startDate.Month && DateTime.Today.Year == startDate.Year)
				{
					curDays = row.Days.Take(DateTime.Today.Day).ToList();
				}
				else
				{
					curDays = row.Days.ToList();
				}

				total = curDays.Average(day =>
				{
					decimal.TryParse(day?.ToString(), out var value);
					return value;
				});

				return Math.Round(total.Value, 2);
			}

			var isTotalRowAverageWorkDays = row.Indicator == Indicator.TotalRow
											&& row.TotalRowIndicator.HasValue
											&& new[] { Indicator.LoadingAverage, Indicator.Loading19Litres, Indicator.LoadingKilograms, Indicator.CargoDailyNormKilograms, Indicator.LoadingCubicMeters }
												.Contains(row.TotalRowIndicator.Value);

			if(new[] { Indicator.LoadingAverage, Indicator.Loading19Litres, Indicator.LoadingKilograms, Indicator.CargoDailyNormKilograms, Indicator.LoadingCubicMeters }.Contains(row.Indicator)
			   || isTotalRowAverageWorkDays)
			{
				var workDays = row.Days.Where(day => day != null);

				if(workDays.Count() == 0)
				{
					return default;
				}

				total = workDays.Average(day =>
				{
					decimal.TryParse(day?.ToString(), out var value);
					return value;
				});

				return Math.Round(total.Value, 2);
			}

			if(new[] { Indicator.Odometer }.Contains(row.Indicator))
			{
				total = row.Days.Sum(day =>
				{
					if(day == null)
					{
						return 0;
					}

					var odometer = day.ToString();
					var index = odometer.IndexOf("/\n");
					decimal.TryParse(odometer.Substring(index + 2, odometer.Length - index - 2), out var value);
					return value;
				});

				return Math.Round(total.Value, 2);
			}

			total = row.Days.Sum(day =>
			{
				decimal.TryParse(day?.ToString(), out var value);
				return value;
			});

			return Math.Round(total.Value, 2);
		}

		private async Task<object[]> ProcessLoadingCubicMetersDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists
					.Where(routeList =>
						routeList.Car.Id == carItem.Id
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed))
					.ToList();

				var loadingCubicMetersValue =
					CalculateVolumeValue(routeListsToProceed, indicatorsType, Convert.ToDecimal(carItem.CarModel.MaxVolume));

				if(loadingCubicMetersValue > 0)
				{
					days[dayId] = Math.Round(loadingCubicMetersValue, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessLoadingKilogramsDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists
					.Where(routeList =>
						routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed))
					.ToList();

				var loadingKilogramsValue = CalculateKilogramsValue(routeListsToProceed, indicatorsType, carItem.CarModel.MaxWeight);

				if(loadingKilogramsValue > 0)
				{
					days[dayId] = Math.Round(loadingKilogramsValue, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessCargoDailyNormKilogramsDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType, IList<CargoDailyNormNode> cargoDailyNorms)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists
					.Where(routeList =>
						routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed))
					.ToList();

				var cargoDailyNormKilogramsValue = CalculateCargoDailyNormKilogramsValue(routeListsToProceed, indicatorsType, carItem.CarModel.MaxWeight, cargoDailyNorms);

				if(cargoDailyNormKilogramsValue > 0)
				{
					days[dayId] = Math.Round(cargoDailyNormKilogramsValue, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessLoading19LitresDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists
					.Where(routeList =>
						routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed))
					.ToList();

				var loading19Value = Calculate19LValue(routeListsToProceed, indicatorsType, carItem.MaxBottles);

				if(loading19Value > 0)
				{
					days[dayId] = Math.Round(loading19Value, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessLoadingAverageDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists
					.Where(routeList =>
						routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& (routeList.Car.MaxBottles > 0
							|| routeList.Car.CarModel.MaxVolume > 0
							|| routeList.Car.CarModel.MaxWeight > 0)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed))
					.ToList();

				var carTotalLoadingArgument = (carItem.CarModel.MaxWeight > 0 ? 1 : 0)
					+ (carItem.CarModel.MaxVolume > 0 ? 1 : 0)
					+ (carItem.MaxBottles > 0 ? 1 : 0);

				decimal loadingAverageValue = 0m;

				if(routeListsToProceed.Count > 0)
				{
					if(carItem.CarModel.MaxWeight > 0)
					{
						loadingAverageValue += CalculateKilogramsValue(routeListsToProceed, indicatorsType, carItem.CarModel.MaxWeight);
					}

					if(carItem.CarModel.MaxVolume > 0)
					{
						loadingAverageValue += CalculateVolumeValue(routeListsToProceed, indicatorsType,
							Convert.ToDecimal(carItem.CarModel.MaxVolume));
					}

					if(carItem.MaxBottles > 0)
					{
						loadingAverageValue += Calculate19LValue(routeListsToProceed, indicatorsType, carItem.MaxBottles);
					}

					loadingAverageValue = loadingAverageValue / carTotalLoadingArgument;

					if(loadingAverageValue > 0)
					{
						days[dayId] = Math.Round(loadingAverageValue, 2);
					}
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessForwardersDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var forwardersCount = routeLists
					.Count(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Forwarder != null
						&& (indicatorsType == IndicatorsType.Plan
							|| routeList.Addresses.Any(routeListAddress =>
								!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status))));

				if(forwardersCount > 0)
				{
					days[dayId] = forwardersCount;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessAddressesDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate, IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var addressesCount = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1))
					.SelectMany(routeList =>
						routeList.Addresses)
					.Count(routeListAddress => indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
						|| indicatorsType == IndicatorsType.Fact &&
							!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status));

				if(addressesCount > 0)
				{
					days[dayId] = addressesCount;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessDistrictsDays(
			int daysInMonth,
			IList<RouteList> routeLists,
			Car carItem,
			DateTime startDate,
			IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var districtsCount = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1))
					.SelectMany(routeList =>
						routeList.Addresses)
					.Count(routeListAddress => (indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact &&
								!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status))
						&& (routeListAddress.RouteList.Driver == null
							|| !routeListAddress.RouteList.Driver.DriverDistrictPrioritySets.Any(ddps =>
								ddps.DateActivated <= routeListAddress.RouteList.Date
								&& (ddps.DateDeactivated == null || ddps.DateDeactivated >= routeListAddress.RouteList.Date)
								&& ddps.DriverDistrictPriorities.Any(ddp =>
									ddp.District.Id == routeListAddress.Order.DeliveryPoint.District?.Id))));

				if(districtsCount > 0)
				{
					days[dayId] = districtsCount;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessLateArrivalsDays(int daysInMonth, IList<RouteList> routeLists, Car carItem, DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var lateArrivalsCount = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress => routeListAddress.Status == RouteListItemStatus.Completed))
					.SelectMany(routeList => routeList.Addresses)
					.Count(routeListAddress => routeListAddress.Status == RouteListItemStatus.Completed
						&& routeListAddress.StatusLastUpdate.HasValue
						&& routeListAddress.StatusLastUpdate.Value.TimeOfDay > routeListAddress.Order.DeliverySchedule.To);

				if(lateArrivalsCount > 0)
				{
					days[dayId] = lateArrivalsCount;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessUndeliveriesDays(int daysInMonth, IList<RouteList> routeLists,
			IList<UndeliveredOrder> undeliveredOrders, Car carItem, DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var undeliveriedAddressesOrdersIds = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1))
					.SelectMany(routeList => routeList.Addresses)
					.Where(routeListAddress => RouteListItem.GetUndeliveryStatuses().Contains(routeListAddress.Status))
					.Select(routeListAddress => routeListAddress.Order.Id).ToList();

				if(undeliveriedAddressesOrdersIds.Any())
				{
					var undeliveredOrdersCount = undeliveredOrders.Count(undeliveredOrder =>
						undeliveriedAddressesOrdersIds.Contains(undeliveredOrder.OldOrder.Id));

					if(undeliveredOrdersCount > 0)
					{
						days[dayId] = undeliveredOrdersCount;
					}
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessFuelOverspendingDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProcess = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& (routeList.RecalculatedDistance != null && routeList.RecalculatedDistance.Value > 0
							|| routeList.ConfirmedDistance > 0))
					.ToList();

				if(routeListsToProcess.Any())
				{
					var difference = routeListsToProcess
						.Sum(routeList => routeList.RecalculatedDistance != null
							? routeList.ConfirmedDistance - routeList.RecalculatedDistance.Value
							: routeList.ConfirmedDistance);

					if(difference > 0)
					{
						days[dayId] = Math.Round(difference, 2);
					}
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessMileageConfirmedDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var confirmedDistance = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.ConfirmedDistance > 0)
					.Sum(routeList => routeList.ConfirmedDistance);

				if(confirmedDistance > 0)
				{
					days[dayId] = Math.Round(confirmedDistance, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessMileageRecalculatedDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var recalculatedDistance = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.RecalculatedDistance != null && routeList.RecalculatedDistance.Value > 0)
					.Sum(routeList => routeList.RecalculatedDistance.Value);

				if(recalculatedDistance > 0)
				{
					days[dayId] = Math.Round(recalculatedDistance, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessMileagePlanDays(int daysInMonth, IList<RouteList> routeLists, Car carItem,
			DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var plannedDistance = routeLists
					.Where(routeList => routeList.Car == carItem
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.PlanedDistance != null && routeList.PlanedDistance.Value > 0)
					.Sum(routeList => routeList.PlanedDistance.Value);

				if(plannedDistance > 0)
				{
					days[dayId] = Math.Round(plannedDistance, 2);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessWageDistrictsDays(
			int daysInMonth,
			IList<RouteList> routeLists,
			Car car,
			DateTime startDate,
			IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var routeListsToProceed = routeLists.Where(routeList =>
						routeList.Car == car
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& routeList.Addresses.Any(routeListAddress =>
							indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact &&
								!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status)))
					.ToList();

				string districtsWageValue = "";

				if(routeListsToProceed.Any())
				{
					var matchedWageDistrictsCount =
						routeListsToProceed.SelectMany(routeList => routeList.Addresses)
							.Where(routeListAddress =>
								indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
								|| indicatorsType == IndicatorsType.Fact &&
									!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status))
							.Select(routeListAddress => routeListAddress.Order.DeliveryPoint)
							.Where(deliveryPoint => deliveryPoint.District != null)
							.Select(deliveryPoint => deliveryPoint.District.WageDistrict.Id)
							.Count(wageDistrictId => wageDistrictId == _suburbWageDistrictId);

					districtsWageValue = matchedWageDistrictsCount > 0 ? "П" : "Г";
				}

				if(!string.IsNullOrEmpty(districtsWageValue))
				{
					days[dayId] = districtsWageValue;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessOdometerDays(int daysInMonth, Car carItem, DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var currentOdometerReading = carItem.OdometerReadings.SingleOrDefault(o => o.StartDate == startDate.AddDays(dayId));

				if(currentOdometerReading == null)
				{
					continue;
				}

				days[dayId] = currentOdometerReading.Odometer.ToString();

				var previousOdometerReading = carItem.OdometerReadings.OrderByDescending(o => o.StartDate).FirstOrDefault(o => o.StartDate < currentOdometerReading.StartDate);

				if(previousOdometerReading == null)
				{
					days[dayId] += "/\n---";
				}
				else
				{
					var confirmedDistance = _uow.Session.QueryOver<RouteList>()
						.Where(routeList => routeList.Car == carItem
									&& routeList.Date >= previousOdometerReading.StartDate
									&& routeList.Date < currentOdometerReading.StartDate
									&& routeList.ConfirmedDistance > 0)
						.Select(Projections.Sum<RouteList>(routeList => routeList.ConfirmedDistance))
						.SingleOrDefault<decimal>();

					days[dayId] += $"/\n{currentOdometerReading.Odometer - previousOdometerReading.Odometer - (int)confirmedDistance}";
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessCarEventsDays(
			int daysInMonth,
			IList<CarEvent> carEvents,
			Car car,
			DateTime startDate)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var dayCarEvent = carEvents.Where(carEvent =>
						carEvent.Car.Id == car.Id
						&& carEvent.StartDate <= startDate.AddDays(dayId)
						&& carEvent.EndDate >= startDate.AddDays(dayId))
					.Select(x => x.CarEventType.ShortName)
					.ToList();

				if(dayCarEvent.Any())
				{
					days[dayId] = string.Join(", ", dayCarEvent);
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private async Task<object[]> ProcessTripsDays(
			int daysInMonth,
			IList<RouteList> routeListsToProceed,
			Car car,
			DateTime startDate,
			IndicatorsType indicatorsType)
		{
			var days = new object[daysInMonth];

			for(var dayId = 0; dayId < daysInMonth; dayId++)
			{
				var tripsCount = routeListsToProceed
					.Count(routeList => routeList.Car == car
						&& routeList.Date >= startDate.AddDays(dayId)
						&& routeList.Date < startDate.AddDays(dayId + 1)
						&& (indicatorsType == IndicatorsType.Plan
							|| routeList.Addresses.Any(routeListAddress =>
								!RouteListItem.GetNotDeliveredStatuses().Contains(routeListAddress.Status))));

				if(tripsCount > 0)
				{
					days[dayId] = tripsCount;
				}
			}

			return await new ValueTask<object[]>(days);
		}

		private static async Task<List<UndeliveredOrder>> GetUndeliveriesForOrders(IUnitOfWork uow, IList<int> ordersIds, CancellationToken cancellationToken)
		{
			return await Task.Run(() => uow.Session.Query<UndeliveredOrder>()
					.Where(undeliveredOrder =>
						ordersIds.Contains(undeliveredOrder.OldOrder.Id)
						&& undeliveredOrder.GuiltyInUndelivery.Any(guiltyInUndelivery =>
							guiltyInUndelivery.GuiltySide == GuiltyTypes.Driver
							|| guiltyInUndelivery.GuiltyDepartment.SubdivisionType == SubdivisionType.Logistic))
					.ToList(),
				cancellationToken);
		}

		private async Task TouchOrders(IUnitOfWork uow, IList<int> ids, CancellationToken cancellationToken)
		{
			await Task.Run(() => uow.Session.Query<Order>()
					.Where(order => ids.Contains(order.Id))
					.Fetch(order => order.DeliveryPoint)
					.ThenFetch(dp => dp.Category)
					.Fetch(order => order.Client)
					.Fetch(order => order.Contract)
					.FetchMany(order => order.OrderItems)
					.ThenFetch(orderItem => orderItem.Nomenclature)
					.ThenFetch(n => n.Unit)
					.Fetch(order => order.DeliveryPoint)
					.ThenFetch(dp => dp.District)
					.ToList(),
				cancellationToken);
		}

		private string GetDriverFormattedName(Employee driver)
		{
			if(driver == null)
			{
				return "-";
			}

			return driver.ShortName;
		}

		private decimal Calculate19LValue(IList<RouteList> routeListsToProceed, IndicatorsType indicatorsType, int carMax19LBottles)
		{
			var routeListsToProceedCount = routeListsToProceed.Count();

			if(routeListsToProceedCount > 0)
			{
				return Math.Round(routeListsToProceed
						.SelectMany(routeList => routeList.Addresses)
						.Where(routeListAddress => indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed)
						.Select(routeListAddress => routeListAddress.Order)
						.SelectMany(order => order.OrderItems)
						.Where(orderItem => orderItem.Nomenclature.IsWater19L)
						.Sum(orderItem => indicatorsType == IndicatorsType.Plan ? orderItem.Count : orderItem.ActualCount ?? 0)
					/ carMax19LBottles * 100 / routeListsToProceedCount
					, 2);
			}
			return 0;
		}

		private decimal CalculateKilogramsValue(IList<RouteList> routeListsToProceed, IndicatorsType indicatorsType, decimal carMaxWeight)
		{
			var routeListsToProceedCount = routeListsToProceed.Count();

			if(routeListsToProceedCount > 0)
			{
				return Math.Round(routeListsToProceed
						.SelectMany(routeList => routeList.Addresses)
						.Where(routeListAddress => indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed)
						.Select(routeListAddress => routeListAddress.Order)
						.Sum(order => order.OrderItems.Sum(orderItem =>
								(indicatorsType == IndicatorsType.Plan ? orderItem.Count : orderItem.ActualCount ?? 0)
								* Convert.ToDecimal(orderItem.Nomenclature.Weight))
							/ carMaxWeight * 100 / routeListsToProceedCount)
					, 2);
			}
			return 0;
		}

		private decimal CalculateCargoDailyNormKilogramsValue(IList<RouteList> routeListsToProceed, IndicatorsType indicatorsType,
			decimal carMaxWeight, IList<CargoDailyNormNode> cargoDailyNorms)
		{
			var routeListsToProceedCount = routeListsToProceed.Count();


			foreach(var rl in routeListsToProceed)
			{
				var v = cargoDailyNorms.SingleOrDefault(x => x.CarTypeOfUse == rl.Car.CarModel.CarTypeOfUse).Amount;
			}

			if(routeListsToProceedCount > 0)
			{
				return Math.Round(routeListsToProceed
						.SelectMany(routeList => routeList.Addresses)
						.Where(routeListAddress => indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
												   || indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed)
						.Sum(routeListAddress => routeListAddress.Order.OrderItems.Sum(orderItem =>
								(indicatorsType == IndicatorsType.Plan ? orderItem.Count : orderItem.ActualCount ?? 0)
								* Convert.ToDecimal(orderItem.Nomenclature.Weight))
							/ (carMaxWeight
							   * cargoDailyNorms.SingleOrDefault(x => x.CarTypeOfUse == routeListAddress.RouteList.Car.CarModel.CarTypeOfUse).Amount)
							   * 100)
					, 2);
			}
			return 0;
		}

		private decimal CalculateVolumeValue(IList<RouteList> routeListsToProceed, IndicatorsType indicatorsType, decimal carMaxVolume)
		{
			var routeListsToProceedCount = routeListsToProceed.Count();

			if(routeListsToProceedCount > 0)
			{
				return Math.Round(routeListsToProceed
						.SelectMany(routeList => routeList.Addresses)
						.Where(routeListAddress => indicatorsType == IndicatorsType.Plan && !routeListAddress.WasTransfered
							|| indicatorsType == IndicatorsType.Fact && routeListAddress.Status == RouteListItemStatus.Completed)
						.Select(routeListAddress => routeListAddress.Order)
						.Sum(order =>
							order.OrderItems.Sum(orderItem =>
								(indicatorsType == IndicatorsType.Plan ? orderItem.Count : orderItem.ActualCount ?? 0)
								* Convert.ToDecimal(orderItem.Nomenclature.Volume))
							/ carMaxVolume * 100 / routeListsToProceedCount)
					, 2);
			}

			return 0;
		}

		public static async Task<CarsExploitationReport> CreateCarsExploitationReport(
			IUnitOfWork uow,
			IRouteListRepository routeListRepository,
			ICarRepository carRepository,
			DateTime startDate,
			IndicatorsType indicatorsType,
			DeliveryType? deliveryType,
			CarOwnType carOwnType,
			int[] includedCarModelIds,
			int[] excludedCarModelIds,
			CarTypeOfUse? carTypeOfUse,
			Car car,
			IList<Indicator> selectedIndicators,
			bool showCarsWithoutData,
			int suburbWageDistrictId,
			CancellationToken cancellationToken)
		{
			var endDate = startDate.AddMonths(1);

			var cargoDailyNorms = GetCargoDailyNorms(routeListRepository);

			var report = new CarsExploitationReport()
			{
				_uow = uow,
				_routeListRepository = routeListRepository,
				_carRepository = carRepository,
				_deliveryType = deliveryType,
				_includedCarModelIds = includedCarModelIds,
				_excludedCarModelIds = excludedCarModelIds,
				_showCarsWithoutData = showCarsWithoutData,
				_suburbWageDistrictId = suburbWageDistrictId,

				CreationDate = DateTime.Now,
				StartDate = startDate,
				EndDate = endDate,
				IndicatorsType = indicatorsType,
				CarOwnType = carOwnType,
				CarTypeOfUse = carTypeOfUse,
				Car = car,
				SelectedIndicators = selectedIndicators,
				CargoDailyNorms = cargoDailyNorms
			};

			await report.Generate(cancellationToken);

			return report;
		}
	}
}
