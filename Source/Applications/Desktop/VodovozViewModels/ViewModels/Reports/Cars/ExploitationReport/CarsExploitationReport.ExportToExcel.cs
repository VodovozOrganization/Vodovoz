using ClosedXML.Excel;
using System;
using System.Drawing;
using System.Linq;

namespace Vodovoz.ViewModels.ViewModels.Reports.Cars.ExploitationReport
{
	public partial class CarsExploitationReport
	{
		private const int _headerColumnsCount = 10;
		private const int _totalColumnCount = 1;
		private readonly XLColor _yellowColor = XLColor.FromColor(Color.FromArgb(255, 240, 200));
		private readonly XLColor _pinkColor = XLColor.FromColor(Color.FromArgb(255, 200, 205));
		private readonly XLColor _lightBlueColor = XLColor.FromColor(Color.FromArgb(137, 207, 239));
		private bool _isConditionalFormattingRequired;
		private bool _isHighlightFastDeliveryDays;

		private int DaysCount => DaysNumbers.Length;
		private int CellsInRowCount => DaysCount + _headerColumnsCount + _totalColumnCount;

		public void ExportToExcel(string path, bool isConditionalFormattingRequired, bool isHighlightFastDeliveryDays)
		{
			_isConditionalFormattingRequired = isConditionalFormattingRequired;
			_isHighlightFastDeliveryDays = isHighlightFastDeliveryDays;

			using(var workbook = new XLWorkbook())
			{
				var worksheet = workbook.Worksheets.Add("Аналитика эксплуатации ТС");

				SetColumnsWidth(worksheet);

				var excelRowCounter = 2;

				AddTableTitleRow(worksheet, excelRowCounter);
				excelRowCounter += 2;

				AddReportInfoRow(worksheet, excelRowCounter);
				excelRowCounter += 2;

				SetTableBordersAndAlignment(worksheet, excelRowCounter);

				AddTableHeadersRow(worksheet, excelRowCounter);
				excelRowCounter++;

				AddTableDataRows(worksheet, excelRowCounter);

				workbook.SaveAs(path);
			}
		}

		private void SetColumnsWidth(IXLWorksheet worksheet)
		{
			var colNumber = 1;

			worksheet.Column(colNumber++).Width = 2;
			worksheet.Column(colNumber++).Width = 6;
			worksheet.Column(colNumber++).Width = 2;
			worksheet.Column(colNumber++).Width = 2;
			worksheet.Column(colNumber++).Width = 13;
			worksheet.Column(colNumber++).Width = 16;
			worksheet.Column(colNumber++).Width = 20;
			worksheet.Column(colNumber++).Width = 12;
			worksheet.Column(colNumber++).Width = 20;
			worksheet.Column(colNumber++).Width = 10;

			for(int i = 0; i < DaysCount; i++)
			{
				worksheet.Column(colNumber++).Width = 6;
			}

			worksheet.Column(colNumber++).Width = 10;
		}

		private void AddTableTitleRow(IXLWorksheet worksheet, int rowNumber)
		{
			worksheet.Cell(rowNumber, 1).Value = $"Аналитика эксплуатации ТС за {StartDate.ToString("MM-yyyy")}г.";

			var tableTitleRange = worksheet.Range(rowNumber, 1, rowNumber, _headerColumnsCount);
			tableTitleRange.Merge();
			FormatTitleCells(tableTitleRange);
		}

		private void FormatTitleCells(IXLRange cellsRange)
		{
			cellsRange.Cells().Style.Font.FontSize = 14;
		}

		private void AddReportInfoRow(IXLWorksheet worksheet, int rowNumber)
		{
			var reportInfo =
				$"Сформировано: {CreationDate.ToString()}\n" +
				$"Выбранные фильтры: {Filters}\n" +
				$"Норма в день:  {CargoDailyNormsString}";

			worksheet.Cell(rowNumber, 1).Value = reportInfo;

			var filtersInfoRange = worksheet.Range(rowNumber, 1, rowNumber, _headerColumnsCount);
			filtersInfoRange.Merge();
			FormatReportInfoCells(filtersInfoRange);

			SetRowHeight(worksheet, rowNumber, 160);
		}

		private void FormatReportInfoCells(IXLRange cellsRange)
		{
			cellsRange.Cells().Style.Alignment.WrapText = true;
		}

		private void SetRowHeight(IXLWorksheet worksheet, int rowNumber, int heightValue)
		{
			worksheet.Row(rowNumber).Height = heightValue;
		}

		private void AddTableHeadersRow(IXLWorksheet worksheet, int rowNumber)
		{
			var colNumber = 1;
			worksheet.Cell(rowNumber, colNumber++).Value = "#";
			worksheet.Cell(rowNumber, colNumber++).Value = "№";
			worksheet.Cell(rowNumber, colNumber++).Value = "П";
			worksheet.Cell(rowNumber, colNumber++).Value = "Т";
			worksheet.Cell(rowNumber, colNumber++).Value = "Номер";
			worksheet.Cell(rowNumber, colNumber++).Value = "Показатель";
			worksheet.Cell(rowNumber, colNumber++).Value = "Закрепленный водитель";
			worksheet.Cell(rowNumber, colNumber++).Value = "Статус";
			worksheet.Cell(rowNumber, colNumber++).Value = "Принадлежность";
			worksheet.Cell(rowNumber, colNumber++).Value = "Обслуж. ч. города";

			for(int i = 0; i < DaysCount; i++)
			{
				var cell = worksheet.Cell(rowNumber, colNumber++);

				cell.Value = DaysNumbers[i];

				if(IsWeekEndDay(DaysNumbers[i]))
				{
					SetBoldFont(cell);
				}
			}

			worksheet.Cell(rowNumber, colNumber++).Value = "Итого";
		}

		private void AddTableDataRows(IXLWorksheet worksheet, int rowNumber)
		{
			foreach(var row in Rows)
			{
				var colNumber = 1;
				worksheet.Cell(rowNumber, colNumber++).Value = row.RowNumber;
				worksheet.Cell(rowNumber, colNumber++).Value = row.CarOrderNumber;
				worksheet.Cell(rowNumber, colNumber++).Value = row.CarOwnTypeName;
				worksheet.Cell(rowNumber, colNumber++).Value = row.CarTypeOfUseName;
				worksheet.Cell(rowNumber, colNumber++).Value = row.RegNumber;
				worksheet.Cell(rowNumber, colNumber++).Value = row.IndicatorName;
				worksheet.Cell(rowNumber, colNumber++).Value = row.AssignedDriver;
				worksheet.Cell(rowNumber, colNumber++).Value = row.DriverStatusName;
				worksheet.Cell(rowNumber, colNumber++).Value = row.DriverOfCarOwnTypeName;
				worksheet.Cell(rowNumber, colNumber++).Value = row.GeographicalGroups;

				for(int i = 0; i < DaysCount; i++)
				{
					var cell = worksheet.Cell(rowNumber, colNumber++);
					cell.Value = row.Days[i];

					var cellDate = StartDate.AddDays(i);
					var isCarVersionChangedToNotSelectedInFilter =
						row.IsCarVersionChangedToNotSelectedInFilter(cellDate);

					if(_isConditionalFormattingRequired)
					{
						var dayStringValue = (row.Days[i] ?? string.Empty).ToString();

						if(row.Indicator == Indicator.Trips)
						{
							var minTrips = row.CarTypeOfUse == Domain.Logistic.Cars.CarTypeOfUse.Largus ? 2 : 1;

							if(!int.TryParse(dayStringValue ?? "0", out var intValue) || intValue < minTrips)
							{
								if(isCarVersionChangedToNotSelectedInFilter)
								{
									SetLightBlueBackground(cell);
								}
								else
								{
									SetPinkBackground(cell);
								}
								continue;
							}
						}

						if(row.Indicator == Indicator.WageDistricts)
						{
							if(dayStringValue == "П")
							{
								SetPinkBackground(cell);
								continue;
							}
						}

						if(_isHighlightFastDeliveryDays)
						{
							if(row.Indicator != Indicator.Trips
								&& row.DaysWithFastDeliveryOrders.Contains(i + 1))
							{
								SetYellowBackground(cell);
								continue;
							}
						}

						if(isCarVersionChangedToNotSelectedInFilter)
						{
							SetLightBlueBackground(cell);
						}
					}
				}

				var totalCell = worksheet.Cell(rowNumber, colNumber++);
				totalCell.Value = row.DaysTotal;

				if(_isConditionalFormattingRequired)
				{
					SetYellowBackground(totalCell);
				}

				rowNumber++;
			}
		}

		private void SetTableBordersAndAlignment(IXLWorksheet worksheet, int tableStartRow)
		{
			var tableEndRow = tableStartRow + Rows.Count;

			var tableHeadersRange = worksheet.Range(tableStartRow, 1, tableStartRow, CellsInRowCount);
			SetTableHeadersTestAlignment(tableHeadersRange);

			var tableDataRange = worksheet.Range(tableStartRow, 1, tableEndRow, _headerColumnsCount);
			FormatTableDataCells(tableDataRange);

			var daysDataRange = worksheet.Range(tableStartRow, _headerColumnsCount + 1, tableEndRow, CellsInRowCount);
			FormatDaysDataCells(daysDataRange);
		}

		private void SetTableHeadersTestAlignment(IXLRange cellsRange)
		{
			cellsRange.Cells().Style.Alignment.WrapText = true;
			cellsRange.Cells().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
		}

		private void FormatTableDataCells(IXLRange cellsRange)
		{
			cellsRange.Cells().Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
			cellsRange.Cells().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
		}

		private void FormatDaysDataCells(IXLRange cellsRange)
		{
			cellsRange.Cells().Style.Border.OutsideBorder = XLBorderStyleValues.Dotted;
			cellsRange.Cells().Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
		}

		private void FillCellBackground(IXLRange cellsRange, XLColor color)
		{
			cellsRange.AddConditionalFormat().WhenNotBlank().Fill.BackgroundColor = color;
			cellsRange.AddConditionalFormat().WhenIsBlank().Fill.BackgroundColor = color;
		}

		private void SetBoldFont(IXLCell cell)
		{
			cell.Style.Font.Bold = true;
		}

		private void SetYellowBackground(IXLCell cell)
		{
			SetCellsBackground(cell, _yellowColor);
		}

		private void SetPinkBackground(IXLCell cell)
		{
			SetCellsBackground(cell, _pinkColor);
		}

		private void SetLightBlueBackground(IXLCell cell)
		{
			SetCellsBackground(cell, _lightBlueColor);
		}

		private void SetCellsBackground(IXLCell cell, XLColor color)
		{
			cell.AddConditionalFormat().WhenNotBlank().Fill.BackgroundColor = color;
			cell.AddConditionalFormat().WhenIsBlank().Fill.BackgroundColor = color;
		}

		private bool IsWeekEndDay(int day)
		{
			var dayDate = new DateTime(StartDate.Year, StartDate.Month, day);

			return dayDate.DayOfWeek == DayOfWeek.Saturday || dayDate.DayOfWeek == DayOfWeek.Sunday;
		}
	}
}
