using Gamma.ColumnConfig;
using Gamma.Widgets.Additions;
using Gtk;
using QS.Views.GtkUI;
using System;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.ViewModels.ViewModels.Reports;
using Vodovoz.ViewWidgets.Reports;

namespace Vodovoz.Views.Reports
{
	public partial class CostCarExploitationReportView : TabViewBase<CostCarExploitationReportViewModel>
	{
		public CostCarExploitationReportView(CostCarExploitationReportViewModel viewModel) : base(viewModel)
		{
			Build();
			Configure();
		}

		private void Configure()
		{
			hboxLabels.Visible = false;

			dateperiodpicker.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.StartDate, w => w.StartDate)
				.AddBinding(vm => vm.EndDate, w => w.EndDate)
				.InitializeFromSource();

			ytreeviewSubjectTypes.ColumnsConfig = FluentColumnsConfig<CarEventTypeNode>.Create()
				.AddColumn("").AddToggleRenderer(x => x.Selected)
				.AddColumn("Вид события").AddTextRenderer(x => x.Title)
				.Finish();
			ytreeviewSubjectTypes.ItemsDataSource = ViewModel.CarEventTypeNodes;

			enumcheckCarTypeOfUse.EnumType = typeof(CarTypeOfUse);
			enumcheckCarTypeOfUse.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.SelectedCarTypeOfUse, w => w.SelectedValuesList, new EnumsListConverter<CarTypeOfUse>())
				.InitializeFromSource();
			enumcheckCarTypeOfUse.SelectAll();

			enumcheckCarOwnType.EnumType = typeof(CarOwnType);
			enumcheckCarOwnType.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.SelectedCarOwnTypes, w => w.SelectedValuesList, new EnumsListConverter<CarOwnType>())
				.InitializeFromSource();
			enumcheckCarOwnType.SelectAll();

			//entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarSelectorFactory);
			//entryCar.CanEditReference = true;
			//entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject).InitializeFromSource();

			datatreeviewDocuments.ColumnsConfig = FluentColumnsConfig<ReportOnTheCostsOfOperatingCarsRow>.Create()
				.AddColumn("№").AddNumericRenderer(ev => ev.Index)
				.AddColumn("Гос. Номер").AddTextRenderer(ev => ev.CarRegistrationNumber)
				.AddColumn("Принадлежность авто").AddTextRenderer(ev => ev.CarOwnTypeString)
				.AddColumn("Тип авто").AddTextRenderer(ev => ev.CarTypeOfUseString)
				.AddColumn("Начало события").AddTextRenderer(ev => ev.SubjectStart.ToString("dd/MM/yyyy"))
				.AddColumn("Окончание события").AddTextRenderer(ev => ev.SubjectEnd.ToString("dd/MM/yyyy"))
				.AddColumn("Вид события").AddTextRenderer(ev => ev.SubjectType)
				.AddColumn("Основание").AddTextRenderer(ev => ev.Foundation)
				.AddColumn("Комментарий").AddTextRenderer(ev => ev.SubjectComment)
				.AddColumn("Общие затраты").AddTextRenderer(ev => ev.Price.ToString("0.##"))
				.AddColumn("Возмещение").AddTextRenderer(ev => ev.Refund.ToString("0.##"))
				.AddColumn("Затраты компании").AddTextRenderer(ev => ev.CompanyExpenses.ToString("0.##"))
				.Finish();

			datatreeviewDocuments.RowActivated += DatatreeviewDocuments_RowActivated;
			ViewModel.PropertyChanged += ReloadReport_PropertyChanged;

			var carModelSelectionFilterView = new CarModelSelectionFilterView(ViewModel.CarModelSelectionFilterViewModel);
			yhboxCarModelContainer.Add(carModelSelectionFilterView);
			carModelSelectionFilterView.Show();
		}

		public override void Destroy()
		{
			ViewModel.PropertyChanged -= ReloadReport_PropertyChanged;
			base.Destroy();
		}

		private void DatatreeviewDocuments_RowActivated(object o, RowActivatedArgs args)
		{
			var carEvent = datatreeviewDocuments.GetSelectedObject<ReportOnTheCostsOfOperatingCarsRow>();
			ViewModel.RowActivated(carEvent);
		}

		protected async void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
			OnYbuttonCreateReportClicked(sender, e);
			ViewModel.SaveReport();
		}

		protected void OnYbuttonCreateReportClicked(object sender, EventArgs e)
		{
			try
			{
				ViewModel.GenerateReport();
				ReloadReport();
				UpdatePrices();
			}
			catch(Exception ex)
			{
				throw ex;
			}

		}

		private void UpdatePrices()
		{
			if (!hboxLabels.Visible)
			{
				hboxLabels.Visible = true;
			}
			labelPrice.Text = ViewModel.Report.SumPrice;
			labelRefund.Text = ViewModel.Report.SumRefund;
			labelCompanyExpenses.Text = ViewModel.Report.SumCompanyExpenses;
		}

		private void ReloadReport_PropertyChanged(object sender, EventArgs e)
		{
			ReloadReport();
		}

		private void ReloadReport()
		{
			datatreeviewDocuments.SetItemsSource(ViewModel.Report.Rows);
		}

		protected void OnEventboxArrowButtonPressEvent(object o, ButtonPressEventArgs args)
		{
			parametersContainer.Visible = !parametersContainer.Visible;
			UpdateSliderArrow();
		}

		private void UpdateSliderArrow()
		{
			arrowSlider.ArrowType = parametersContainer.Visible ? ArrowType.Left : ArrowType.Right;
		}
	}
}
