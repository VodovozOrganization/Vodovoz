using System;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Gamma.GtkWidgets.Cells;
using Gamma.Widgets.Additions;
using Gdk;
using Gtk;
using QS.Views.GtkUI;
using Vodovoz.CommonEnums;
using Vodovoz.Domain.Logistic.Cars;
using Vodovoz.ViewModels.Reports;

namespace Vodovoz.Views.Reports
{
	public partial class CarsExploitationReportView : TabViewBase<CarsExploitationReportViewModel>
	{
		private Task _generationTask;

		Color _defaulColor = new Color(252, 252, 252);
		Color _badColor = new Color(255, 199, 206);
		Color _totalRowColor = new Color(199, 206, 255);
		private Color _totalDaysColor = new Color(255, 243, 199);

		public CarsExploitationReportView(CarsExploitationReportViewModel viewModel) : base(viewModel)
		{
			Build();

			Configure();
		}

		private void Configure()
		{
			UpdateSliderArrow();

			// Период

			comboMonth.ItemsEnum = typeof(Month);
			comboMonth.SelectedItem = (Month)DateTime.Today.Month;
			comboMonth.Binding.AddBinding(ViewModel, vm => vm.StartMonth, w => w.SelectedItem).InitializeFromSource();

			comboYear.DefaultFirst = true;
			comboYear.ItemsList = Enumerable.Range(DateTime.Now.AddYears(-10).Year, 11).Reverse();
			comboYear.Binding.AddBinding(ViewModel, vm => vm.StartYear, w => w.SelectedItem).InitializeFromSource();

			// Подсчет по

			comboIndicatorsType.DefaultFirst = true;
			comboIndicatorsType.ItemsEnum = typeof(IndicatorsType);
			comboIndicatorsType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboIndicatorsType.Binding.AddBinding(ViewModel, vm => vm.IndicatorsType, w => w.SelectedItem).InitializeFromSource();

			// Принадлежность автомобиля

			enumComboOwnType.ItemsEnum = typeof(CarOwnType);
			enumComboOwnType.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			enumComboOwnType.Binding.AddBinding(ViewModel, vm => vm.CarOwnType, w => w.SelectedItem).InitializeFromSource();

			// Тип автомобиля

			comboCarTypeOfUse.DefaultFirst = true;
			comboCarTypeOfUse.ItemsEnum = typeof(CarTypeOfUse);
			comboCarTypeOfUse.AddEnumToHideList(CarTypeOfUse.Truck);
			comboCarTypeOfUse.EnumItemSelected += (sender, args) => UpdateAvailableIndicators();
			comboCarTypeOfUse.Binding.AddBinding(ViewModel, vm => vm.TypeOfUse, w => w.SelectedItemOrNull).InitializeFromSource();

			ycheckShowCarsWithoutData.Binding.AddBinding(ViewModel, vm => vm.ShowCarsWithoutData, w => w.Active).InitializeFromSource();

			hboxDriverDelayTime.Visible = ylabelDriverScheduleDelay.Visible = false;

			yspinMinutes.ValueAsInt = 30;

			ybuttonInfo.Clicked += (sender, args) => { ViewModel.ShowInfoWindow(); };
			ybuttonSelectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.SelectAll(); };
			ybuttonUnselectAllIndicators.Clicked += (sender, args) => { enumchecklistIndicators.UnselectAll(); };

			entryCar.SetEntityAutocompleteSelectorFactory(ViewModel.CarAutocompleteSelectorFactory);
			entryCar.Binding.AddBinding(ViewModel, vm => vm.Car, w => w.Subject);
			entryCar.Changed += (sender, args) => OnEntryCarChanged();

			ybuttonSave.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.CanSave, w => w.Sensitive)
				.InitializeFromSource();

			enumchecklistIndicators.RememberStateOnHide = true;
			enumchecklistIndicators.EnumType = typeof(Indicator);
			enumchecklistIndicators.Binding.AddBinding(ViewModel, vm => vm.SelectedIndicators, w => w.SelectedValuesList,
				new EnumsListConverter<Indicator>());

			ybuttonCreateReport.Binding.AddSource(ViewModel)
				.AddFuncBinding(vm => !vm.IsGenerating, w => w.Visible)
				.AddBinding(vm => vm.CanGenerate, w => w.Sensitive)
				.InitializeFromSource();

			ybuttonCreateReport.Clicked += OnButtonCreateReportClicked;

			ycheckbuttonConditionalFormattingRequired.Binding.AddBinding(ViewModel, vm => vm.IsConditionalFormattingRequired, w => w.Active)
				.InitializeFromSource();

			ybuttonAbortCreateReport.Binding.AddSource(ViewModel)
				.AddBinding(vm => vm.IsGenerating, w => w.Visible)
				.AddBinding(vm => vm.CanCancelGenerate, w => w.Sensitive)
				.InitializeFromSource();

			ybuttonAbortCreateReport.Clicked += OnButtonAbortCreateReportClicked;

			ViewModel.PropertyChanged += ViewModelPropertyChanged;

			enumchecklistIndicators.SelectAll();
			UpdateAvailableIndicators();
		}

		private void ConfigureTreeView()
		{
			var columnsConfig = Gamma.ColumnConfig.FluentColumnsConfig<CarsExploitationReportRow>.Create()
				.AddColumn("Номер\nстроки").HeaderAlignment(0.5f).AddNumericRenderer(row => row.RowNumber).XAlign(0.5f)
				.AddColumn("№").HeaderAlignment(0.5f).AddNumericRenderer(row => row.CarOrderNumber).XAlign(0.5f)
				.AddColumn("П").HeaderAlignment(0.5f).AddTextRenderer(row => row.CarOwnTypeName).XAlign(0.5f)
				.AddColumn("Т").HeaderAlignment(0.5f).AddTextRenderer(row => row.CarTypeOfUseName).XAlign(0.5f)
				.AddColumn("Номер").HeaderAlignment(0.5f).AddTextRenderer(row => row.RegNumber).XAlign(0.5f)
				.AddColumn("Показатель").HeaderAlignment(0.5f).AddEnumRenderer(row => row.Indicator).XAlign(0.5f)
				.AddColumn("Закрепленный водитель").HeaderAlignment(0.5f).AddTextRenderer(row => row.AssignedDriver).XAlign(0.5f)
				.AddColumn("Обслуж.\nч. города").HeaderAlignment(0.5f).AddTextRenderer(row => row.GeographicalGroups).XAlign(0.5f);

			var month = ViewModel.Report.StartDate.Month;
			var year = ViewModel.Report.StartDate.Year;

			var weekend = new[] { DayOfWeek.Saturday, DayOfWeek.Sunday };

			var daysInMonth = DateTime.DaysInMonth(year, month);

			for(var i = 0; i < daysInMonth; i++)
			{
				var index = i;
				bool isHoliday = weekend.Contains(new DateTime(year, month, i + 1).DayOfWeek);
				var dayLabelText = $"{i + 1}";

				columnsConfig.AddColumn($"{dayLabelText}")
					.MinWidth(35)
					.HeaderAlignment(.5f)
					.AddTextRenderer(row => row.Days[index] == null ? "" : row.Days[index].ToString())
					.AddSetter(MakeDaysConditionalFormattingSetter(index, isHoliday))
					.WrapWidth(35)
					.WrapMode(Pango.WrapMode.WordChar)
					.XAlign(0.5f)
					.RowCells();
			}

			columnsConfig.AddColumn("Итого")
				.HeaderAlignment(.5f)
				.AddNumericRenderer(row => row.DaysTotal).Digits(2)
				.AddSetter((c, r) => c.BackgroundGdk = r.Indicator == Indicator.TotalRow ? _totalRowColor : _totalDaysColor)
				.XAlign(0.5f);

			columnsConfig.AddColumn("");

			ytreeReportIndicatorsRows.ColumnsConfig = columnsConfig.Finish();

			ytreeReportIndicatorsRows.EnableGridLines = TreeViewGridLines.Both;
		}

		private Action<NodeCellRendererText<CarsExploitationReportRow>, CarsExploitationReportRow> MakeDaysConditionalFormattingSetter(
			int index, bool isHoliday)
		{
			return (x, y) =>
			{
				if(isHoliday)
				{
					x.Weight = 800;
				}

				if(ViewModel.Report != null && ViewModel.Report.CreationDate >= ViewModel.Report.StartDate.AddDays(index))
				{
					var color = _defaulColor;

					switch(y.Indicator)
					{
						case Indicator.Trips:
						{
							var minTrips = y.CarTypeOfUse == CarTypeOfUse.Largus ? 2 : 1;

							if(!int.TryParse(x.Text ?? "0", out var intValue) || intValue < minTrips)
							{
								color = _badColor;
							}
							break;
						}
						case Indicator.WageDistricts when x.Text == "П":
							color = _badColor;
							break;
						case Indicator.TotalRow:
							color = _totalRowColor;
							break;
					}

					x.CellBackgroundGdk = color;
				}
			};
		}

		private void UpdateSliderArrow()
		{
			arrowSlider.ArrowType = parametersContainer.Visible ? ArrowType.Left : ArrowType.Right;
		}

		protected void OnEventboxArrowButtonPressEvent(object o, ButtonPressEventArgs args)
		{
			parametersContainer.Visible = !parametersContainer.Visible;
			UpdateSliderArrow();
		}

		private void UpdateAvailableIndicators()
		{
			enumchecklistIndicators.ClearEnumHideList();
			enumchecklistIndicators.AddEnumToHideList(Indicator.WorkSchedules);
			enumchecklistIndicators.AddEnumToHideList(Indicator.TotalRow);

			if((IndicatorsType)comboIndicatorsType.SelectedItem == IndicatorsType.Plan)
			{
				enumchecklistIndicators.AddEnumToHideList(
					Indicator.MileageRecalculated,
					Indicator.MileageConfirmed,
					Indicator.FuelOverspending,
					Indicator.Undeliveries,
					Indicator.LateArrivals,
					Indicator.WorkSchedules,
					Indicator.Odometer
				);
			}
			else
			{
				enumchecklistIndicators.AddEnumToHideList(Indicator.MileagePlan);
			}

			switch((CarOwnType)enumComboOwnType.SelectedItem)
			{
				case CarOwnType.Company:
					if(comboCarTypeOfUse.SelectedItem is CarTypeOfUse.Largus)
					{
						enumchecklistIndicators.AddEnumToHideList(Indicator.Forwarders);
					}
					break;
				case CarOwnType.Driver:
					enumchecklistIndicators.AddEnumToHideList(
						Indicator.MileageConfirmed,
						Indicator.MileagePlan,
						Indicator.MileageRecalculated,
						Indicator.FuelOverspending,
						Indicator.Odometer
					);
					break;
			}
		}

		private void ViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)
		{
			if(e.PropertyName == nameof(ViewModel.Report))
			{
				if(ViewModel.Report?.Rows != null)
				{
					ConfigureTreeView();
					ytreeReportIndicatorsRows.ItemsDataSource = ViewModel.Report.Rows;
					ytreeReportIndicatorsRows.YTreeModel.EmitModelChanged();
				}
			}
		}

		private void OnEntryCarChanged()
		{
			if(entryCar.Subject is Car car)
			{
				var activeCarVersion = car.GetActiveCarVersionOnDate();

				comboCarTypeOfUse.Sensitive = false;
				comboCarTypeOfUse.SelectedItem = car.CarModel.CarTypeOfUse;

				enumComboOwnType.Sensitive = false;
				enumComboOwnType.SelectedItem = activeCarVersion.CarOwnType;
			}
			else
			{
				enumComboOwnType.Sensitive = true;
				comboCarTypeOfUse.Sensitive = true;
			}

			UpdateAvailableIndicators();
		}

		protected async void OnYbuttonSaveClicked(object sender, EventArgs e)
		{
			var extension = ".xlsx";

			var filechooser = new FileChooserDialog("Сохранить отчет...",
				null,
				FileChooserAction.Save,
				"Отменить", ResponseType.Cancel,
				"Сохранить", ResponseType.Accept)
			{
				DoOverwriteConfirmation = true,
				CurrentName = $"{Tab.TabName} {ViewModel.Report.CreationDate:yyyy-MM-dd-HH-mm}{extension}"
			};

			var excelFilter = new FileFilter
			{
				Name = $"Документ Microsoft Excel ({extension})"
			};

			excelFilter.AddMimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			excelFilter.AddPattern($"*{extension}");
			filechooser.AddFilter(excelFilter);

			if(filechooser.Run() == (int)ResponseType.Accept)
			{
				var path = filechooser.Filename;

				if(!path.Contains(extension))
				{
					path += extension;
				}

				filechooser.Hide();

				ViewModel.IsSaving = true;

				await Task.Run(() =>
				{
					try
					{
						ybuttonSave.Label = "Отчет сохраняется...";
						ViewModel.ExportReport(path);
					}
					finally
					{
						Application.Invoke((s, eventArgs) =>
						{
							ViewModel.IsSaving = false;
							ybuttonSave.Label = "Сохранить";
						});
					}
				});
			}

			filechooser.Destroy();
		}

		protected async void OnButtonCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource = new CancellationTokenSource();

			ViewModel.IsGenerating = true;

			_generationTask = Task.Run(async () =>
			{
				try
				{
					var report = await ViewModel.ActionGenerateReport(ViewModel.ReportGenerationCancelationTokenSource.Token);

					Application.Invoke((s, eventArgs) => { ViewModel.Report = report; });
				}
				catch(OperationCanceledException)
				{
					Application.Invoke((s, eventArgs) => { ViewModel.ShowWarning("Формирование отчета было прервано"); });
				}
				catch(Exception ex)
				{
					Application.Invoke((s, eventArgs) => { throw ex; });
				}
				finally
				{
					Application.Invoke((s, eventArgs) => { ViewModel.IsGenerating = false; });
				}
			}, ViewModel.ReportGenerationCancelationTokenSource.Token);

			await _generationTask;
		}

		protected void OnButtonAbortCreateReportClicked(object sender, EventArgs e)
		{
			ViewModel.ReportGenerationCancelationTokenSource.Cancel();
			ViewModel.CanCancelGenerate = false;
		}
	}
}
